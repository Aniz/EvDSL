// Autogenerated by EvDSL
package riseevents.ev.repository;
import riseevents.ev.util.LibraryOfDSL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import riseevents.ev.data.NewClass;
import riseevents.ev.exception.NewClassNotFoundException;
import riseevents.ev.exception.NewClassAlreadyInsertedException;
import riseevents.ev.exception.RepositoryException;
import riseevents.ev.util.PersistenceMechanismException;
import riseevents.ev.util.PersistenceMechanismRDBMS;
import riseevents.ev.data.NewClass.TypeNewClass;

public class NewClassRepositoryBDR implements NewClassRepository{
	
	private static NewClassRepositoryBDRBDR instance;
	private PersistenceMechanismRDBMS pm;
	
	public NewClassRepositoryBDRBDR(){
		try{
			pm = PersistenceMechanismRDBMS.getInstance();
			pm.connect();
		}catch(Exception ex){
			ex.printStackTrace();
		}
	}
	
	public synchronized static NewClassRepositoryBDRBDR getInstance(){
		if(instance == null){
			instance = new NewClassRepositoryBDRBDR();
		}
		return instance;
	}
	
	@Override
	public void insert(NewClass newclass) throws RepositoryException{
		try {
			Statement statement = (Statement) pm.getCommunicationChannel();
			statement.executeUpdate("INSERT INTO NewClass (banana,typeNewClass) Values('" +
newclass.getBanana()+"','"+newclass.getTypeNewClass()+"')");
		
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (PersistenceMechanismException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			try {
				pm.releaseCommunicationChannel();
			} catch (PersistenceMechanismException ex) {
				throw new RepositoryException(ex);
			}
		}
		
	}

	@Override
	public void remove(NewClass newclass) throws NewClassNotFoundException,
			RepositoryException {
		try{
            Statement statement = (Statement) pm.getCommunicationChannel();
		    int i = statement.executeUpdate("DELETE FROM NewClass WHERE idNewClass = '"+ newclass.getIdNewClass()+"'"); 
		    if (i == 0) {
            	throw new NewClassNotFoundException(NewClass.getIdNewClass());
            }
		} catch(PersistenceMechanismException e){
            throw new RepositoryException(e);
		} catch(SQLException e){
            throw new RepositoryException(e);            
		} finally {
			try {
				pm.releaseCommunicationChannel();
			} catch (PersistenceMechanismException ex) {
				throw new RepositoryException(ex);
			}
		}
		
	}

	@Override
	public NewClass search(int idEntity) throws NewClassNotFoundException,
			RepositoryException {
		NewClass NewClass = null;
		NewClass = new NewClass();
        try {
            Statement statement = (Statement) pm.getCommunicationChannel();
            ResultSet resultset = statement.executeQuery("Select * from NewClass WHERE idNewClass =" + idEntity);
            if (resultset.next()) {  	
    			newclass.setTypeNewClass(TypeNewClass.valueOf(resultset.getString("typeNewClass")));
				newclass.setBanana(resultset.getInt("banana"));
	
		     } else {
            	throw new NewClassNotFoundException(idEntity);
            }
			resultset.close();
		} catch(PersistenceMechanismException e){
            throw new RepositoryException(e);
        } catch (SQLException e) {
			throw new RepositoryException(e);
		} finally {
			try {
				pm.releaseCommunicationChannel();
			} catch (PersistenceMechanismException ex) {
				throw new RepositoryException(ex);
			}
		}
		return newclass;
	}

	@Override
	public List<NewClass> getNewClassList() throws RepositoryException {
		NewClass activity=null;
		ArrayList<NewClass> list = new ArrayList<NewClass>();
        try {
            Statement statement = (Statement) pm.getCommunicationChannel();
            ResultSet resultset = statement.executeQuery("select * from NewClass");
            while (resultset.next()) {
            	newclass = new NewClass();
    			newclass.setTypeNewClass(TypeNewClass.valueOf(resultset.getString("typeNewClass")));
				newclass.setBanana(resultset.getInt("banana"));
	
				list.add(newclass);
            } 
			resultset.close();
		} catch(PersistenceMechanismException e){
            throw new RepositoryException(e);
        } catch (SQLException e) {
			throw new RepositoryException(e);
		} finally {
			try {
				pm.releaseCommunicationChannel();
			} catch (PersistenceMechanismException ex) {
				throw new RepositoryException(ex);
			}
		}
		return list;
	}

	@Override
	public void update(NewClass newclass) throws NewClassNotFoundException,
			RepositoryException {
		try {
    	    Statement statement = (Statement) pm.getCommunicationChannel();

    	    statement.executeUpdate("UPDATE NewClass SET
	    banana = '"+ activity.getBanana() +
	    "', typeNewClass = '"+ newclass.getTypeNewClass() +
	     "' WHERE idNewClass = '"+ newclass.getIdNewClass()+"'");

		} catch(PersistenceMechanismException e){
            throw new RepositoryException(e);
		} catch (SQLException e) {
		    throw new RepositoryException(e);
	    } finally {
	    	try {
				pm.releaseCommunicationChannel();
			} catch (PersistenceMechanismException ex) {
				throw new RepositoryException(ex);
			}
		}
		
	}

	@Override
	public boolean isThere(int idEntity) throws RepositoryException {
		boolean answer = false;
        try {
            Statement statement = (Statement) pm.getCommunicationChannel();
            ResultSet resultset = statement.executeQuery("SELECT * FROM NewClass WHERE idNewClass = '" + idEntity +"'");
            answer = resultset.next();
			resultset.close();
		} catch(PersistenceMechanismException e){
            throw new RepositoryException(e);
        } catch (SQLException e) {
			throw new RepositoryException(e);
		} finally {
			try {
				pm.releaseCommunicationChannel();
			} catch (PersistenceMechanismException ex) {
				throw new RepositoryException(ex);
			}
		}
        return answer;
	}

}
//#endif