// Autogenerated by EvDSL

package riseevents.ev.util.LibraryOfDSL;
import riseevents.ev.util.LibraryOfDSL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import riseevents.ev.data.NewClass;
import riseevents.ev.exception.NewClassException;
import riseevents.ev.exception.RepositoryException;
import riseevents.ev.util.PersistenceMechanismException;
import riseevents.ev.util.PersistenceMechanismRDBMS;
import riseevents.ev.data.NewClass.TypeNewClass;

public class NewClassBDR implements NewClass{

	
	private static NewClassBDR instance;
	private PersistenceMechanismRDBMS pm;
	
	public NewClassBDR(){
		try{
			pm = PersistenceMechanismRDBMS.getInstance();
			pm.connect();
		}catch(Exception ex){
			ex.printStackTrace();
		}
	}
	
	public synchronized static NewClassBDR getInstance(){
		if(instance == null){
			instance = new NewClassBDR();
		}
		return instance;
	}
	
	@Override
	public void insert(NewClass newclass) throws RepositoryException{
		try {
			Statement statement = (Statement) pm.getCommunicationChannel();
			statement.executeUpdate("INSERT INTO NewClass (banana,typeNewClass) Values('"
newclass.getBanana()+"','"+newclass.getTypeNewClass()+"')");
		
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (PersistenceMechanismException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			try {
				pm.releaseCommunicationChannel();
			} catch (PersistenceMechanismException ex) {
				throw new RepositoryException(ex);
			}
		}
		
	}

	@Override
	public void remove(NewClass NewClass) throws NewClassNotFoundException,
			RepositoryException {
		try{
            Statement statement = (Statement) pm.getCommunicationChannel();
		    int i = statement.executeUpdate("DELETE FROM NewClass WHERE idNewClass = '"+ NewClass.getIdEntity() +"'AND idUser ='"+NewClass.getIdOrganizer()+"'");
            if (i == 0) {
            	throw new NewClassNotFoundException(NewClass.getIdEntity());
            }
		} catch(PersistenceMechanismException e){
            throw new RepositoryException(e);
		} catch(SQLException e){
            throw new RepositoryException(e);            
		} finally {
			try {
				pm.releaseCommunicationChannel();
			} catch (PersistenceMechanismException ex) {
				throw new RepositoryException(ex);
			}
		}
		
	}

	@Override
	public NewClass search(int idEntity) throws NewClassNotFoundException,
			RepositoryException {
		NewClass NewClass = null;
		NewClass = new NewClass();
        try {
            Statement statement = (Statement) pm.getCommunicationChannel();
            ResultSet resultset = statement.executeQuery("Select * from NewClass WHERE idEntity =" + idEntity);
            if (resultset.next()) { 
            	
            	NewClass.setIdEntity(resultset.getInt("idEntity"));
            	NewClass.setIdOrganizer(resultset.getInt("idUser"));
            	
            } else {
            	throw new NewClassNotFoundException(idEntity);
            }
			resultset.close();
		} catch(PersistenceMechanismException e){
            throw new RepositoryException(e);
        } catch (SQLException e) {
			throw new RepositoryException(e);
		} finally {
			try {
				pm.releaseCommunicationChannel();
			} catch (PersistenceMechanismException ex) {
				throw new RepositoryException(ex);
			}
		}
		return NewClass;
	}

	@Override
	public void update(NewClass NewClass) throws NewClassNotFoundException,
			RepositoryException {
		try {
    	    Statement statement = (Statement) pm.getCommunicationChannel();

    	    statement.executeUpdate("UPDATE NewClass SET idNewClass = '"+ NewClass.getIdEntity() +
    	    		                                 "', idUser = '" + NewClass.getIdOrganizer() +"'");

		} catch(PersistenceMechanismException e){
            throw new RepositoryException(e);
		} catch (SQLException e) {
		    throw new RepositoryException(e);
	    } finally {
	    	try {
				pm.releaseCommunicationChannel();
			} catch (PersistenceMechanismException ex) {
				throw new RepositoryException(ex);
			}
		}
		
	}

	@Override
	public boolean isThere(NewClass NewClass) throws RepositoryException {
		boolean answer = false;
        try {
            Statement statement = (Statement) pm.getCommunicationChannel();
            ResultSet resultset = statement.executeQuery("SELECT * FROM NewClass WHERE idEntity = '" + NewClass.getIdEntity() + "'AND idUser='" + NewClass.getIdOrganizer() +"'");
            //ResultSet resultset = statement.executeQuery("select * from NewClass where idEntity = 1 AND idUser = 2;");
            answer = resultset.next();
			resultset.close();
		} catch(PersistenceMechanismException e){
            throw new RepositoryException(e);
        } catch (SQLException e) {
			throw new RepositoryException(e);
		} finally {
			try {
				pm.releaseCommunicationChannel();
			} catch (PersistenceMechanismException ex) {
				throw new RepositoryException(ex);
			}
		}
        return answer;
	}

}
//#endif