// Autogenerated by EvDSL
package riseevents.ev.ui2;
import riseevents.ev.util.LibraryOfDSL;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyVetoException;

import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.WindowConstants;
import javax.swing.border.EmptyBorder;

import riseevents.ev.facade.RiseEventsFacade;

public class RiseEventsMainScreenP extends JFrame {

	private JPanel contentPane;
	
    public static RiseEventsFacade facade; // caso a variabilidade de tela login seja retirada o sistema deve iniciar dessa tela
	
	private static RiseEventsMainScreenP instanceRiseEventsMainScreenP;      
	
	private UserInsertScreenP screenInsertUser;	
	private UserUpdateScreenP screenUpdateUser;	
	private UserSearchScreenP screenSearchUser;	
	private UserRemoveScreenP screenRemoveUser;	
	private UserListAllScreenP screenListAllUser;	

	private SpeakerInsertScreenP screenInsertSpeaker;	
	private SpeakerUpdateScreenP screenUpdateSpeaker;	
	private SpeakerSearchScreenP screenSearchSpeaker;	
	private SpeakerRemoveScreenP screenRemoveSpeaker;	
	private SpeakerListAllScreenP screenListAllSpeaker;	

	private OrganizerInsertScreenP screenInsertOrganizer;	
	private OrganizerUpdateScreenP screenUpdateOrganizer;	
	private OrganizerSearchScreenP screenSearchOrganizer;	
	private OrganizerRemoveScreenP screenRemoveOrganizer;	
	private OrganizerListAllScreenP screenListAllOrganizer;	

	private ReviewerInsertScreenP screenInsertReviewer;	
	private ReviewerUpdateScreenP screenUpdateReviewer;	
	private ReviewerSearchScreenP screenSearchReviewer;	
	private ReviewerRemoveScreenP screenRemoveReviewer;	
	private ReviewerListAllScreenP screenListAllReviewer;	

	private EventInsertScreenP screenInsertEvent;	
	private EventUpdateScreenP screenUpdateEvent;	
	private EventSearchScreenP screenSearchEvent;	
	private EventRemoveScreenP screenRemoveEvent;	
	private EventListAllScreenP screenListAllEvent;	


	private ReceiptScreenP screenReceipt;
	
	
	private static JLabel labelImagem;
	
	private JDesktopPane desktopPane;
	
	
	public static RiseEventsFacade getFacade(){
		return RiseEventsFacade.getInstance();
	}
	
	public static RiseEventsMainScreenP getInstanceRiseEventsMainScreenP() {
		if (instanceRiseEventsMainScreenP == null) {
			RiseEventsMainScreenP.instanceRiseEventsMainScreenP = new RiseEventsMainScreenP();
		}
		return RiseEventsMainScreenP.instanceRiseEventsMainScreenP;
	}

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					RiseEventsMainScreenP frame = new RiseEventsMainScreenP();
					frame.setVisible(true);
					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public RiseEventsMainScreenP() {
		
		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		
		ExitMenuAction exitMenuAction = new ExitMenuAction();
		
		InsertUserMenuAction insertUserAction = new InsertUserMenuAction();	
		UpdateUserMenuAction updateUserAction = new UpdateUserMenuAction();	
		SearchUserMenuAction searchUserAction = new SearchUserMenuAction();	
		RemoveUserMenuAction removeUserAction = new RemoveUserMenuAction();	
		ListAllUserMenuAction listallUserAction = new ListAllUserMenuAction();	

		InsertSpeakerMenuAction insertSpeakerAction = new InsertSpeakerMenuAction();	
		UpdateSpeakerMenuAction updateSpeakerAction = new UpdateSpeakerMenuAction();	
		SearchSpeakerMenuAction searchSpeakerAction = new SearchSpeakerMenuAction();	
		RemoveSpeakerMenuAction removeSpeakerAction = new RemoveSpeakerMenuAction();	
		ListAllSpeakerMenuAction listallSpeakerAction = new ListAllSpeakerMenuAction();	

		InsertOrganizerMenuAction insertOrganizerAction = new InsertOrganizerMenuAction();	
		UpdateOrganizerMenuAction updateOrganizerAction = new UpdateOrganizerMenuAction();	
		SearchOrganizerMenuAction searchOrganizerAction = new SearchOrganizerMenuAction();	
		RemoveOrganizerMenuAction removeOrganizerAction = new RemoveOrganizerMenuAction();	
		ListAllOrganizerMenuAction listallOrganizerAction = new ListAllOrganizerMenuAction();	

		InsertReviewerMenuAction insertReviewerAction = new InsertReviewerMenuAction();	
		UpdateReviewerMenuAction updateReviewerAction = new UpdateReviewerMenuAction();	
		SearchReviewerMenuAction searchReviewerAction = new SearchReviewerMenuAction();	
		RemoveReviewerMenuAction removeReviewerAction = new RemoveReviewerMenuAction();	
		ListAllReviewerMenuAction listallReviewerAction = new ListAllReviewerMenuAction();	

		InsertEventMenuAction insertEventAction = new InsertEventMenuAction();	
		UpdateEventMenuAction updateEventAction = new UpdateEventMenuAction();	
		SearchEventMenuAction searchEventAction = new SearchEventMenuAction();	
		RemoveEventMenuAction removeEventAction = new RemoveEventMenuAction();	
		ListAllEventMenuAction listallEventAction = new ListAllEventMenuAction();	


		//#if ${Bugs} == "T"
		BugtrackScreenMenuAction bugtrackAction = new BugtrackScreenMenuAction();
		//#endif
		
		RiseEventsMainScreenP.facade = RiseEventsFacade.getInstance();
		
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 1120, 691);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		desktopPane = new JDesktopPane();
		desktopPane.setBackground(Color.LIGHT_GRAY);
		desktopPane.setBounds(6, 36, 1104, 624);
		contentPane.add(desktopPane);
		
		labelImagem = new JLabel("");
		labelImagem.setBounds(210, 164, 648, 193);
		ImageIcon image = new ImageIcon(getClass().getResource("/images/riseLabs.png"));
		Image imag = image.getImage().getScaledInstance(labelImagem.getWidth(), labelImagem.getHeight(), Image.SCALE_SMOOTH);
		labelImagem.setIcon(new ImageIcon(imag));
		desktopPane.add(labelImagem);
		
		JMenuBar menuBar = new JMenuBar();
		menuBar.setBounds(32, 12, 1078, 22);
		contentPane.add(menuBar);
		
		JMenu mnArchieve = new JMenu("Archieve");
		menuBar.add(mnArchieve);
		
		//#if ${Bugs} == "T"		
		JMenuItem mntmBugtrack = new JMenuItem("Bugtrack");
		mnArchieve.add(mntmBugtrack);
		//#endif
		
		JMenuItem mntmExit = new JMenuItem("Exit");
		mnArchieve.add(mntmExit);

		JMenu mnUser = new JMenu("User");
		menuBar.add(mnUser);
		JMenuItem mntmInsertUser = new JMenuItem("Insert");
		mnUser.add(mntmInsertUser);
		mntmInsert.addActionListener(insertUserAction);
		JMenuItem mntmUpdateUser = new JMenuItem("Update");
		mnUser.add(mntmUpdateUser);
		mntmUpdate.addActionListener(updateUserAction);
		JMenuItem mntmSearchUser = new JMenuItem("Search");
		mnUser.add(mntmSearchUser);
		mntmSearch.addActionListener(searchUserAction);
		JMenuItem mntmRemoveUser = new JMenuItem("Remove");
		mnUser.add(mntmRemoveUser);
		mntmRemove.addActionListener(removeUserAction);
		JMenuItem mntmListAllUser = new JMenuItem("ListAll");
		mnUser.add(mntmListAllUser);
		mntmListAll.addActionListener(listallUserAction);
		JMenu mnSpeaker = new JMenu("Speaker");
		menuBar.add(mnSpeaker);
		JMenuItem mntmInsertSpeaker = new JMenuItem("Insert");
		mnSpeaker.add(mntmInsertSpeaker);
		mntmInsert.addActionListener(insertSpeakerAction);
		JMenuItem mntmUpdateSpeaker = new JMenuItem("Update");
		mnSpeaker.add(mntmUpdateSpeaker);
		mntmUpdate.addActionListener(updateSpeakerAction);
		JMenuItem mntmSearchSpeaker = new JMenuItem("Search");
		mnSpeaker.add(mntmSearchSpeaker);
		mntmSearch.addActionListener(searchSpeakerAction);
		JMenuItem mntmRemoveSpeaker = new JMenuItem("Remove");
		mnSpeaker.add(mntmRemoveSpeaker);
		mntmRemove.addActionListener(removeSpeakerAction);
		JMenuItem mntmListAllSpeaker = new JMenuItem("ListAll");
		mnSpeaker.add(mntmListAllSpeaker);
		mntmListAll.addActionListener(listallSpeakerAction);
		JMenu mnOrganizer = new JMenu("Organizer");
		menuBar.add(mnOrganizer);
		JMenuItem mntmInsertOrganizer = new JMenuItem("Insert");
		mnOrganizer.add(mntmInsertOrganizer);
		mntmInsert.addActionListener(insertOrganizerAction);
		JMenuItem mntmUpdateOrganizer = new JMenuItem("Update");
		mnOrganizer.add(mntmUpdateOrganizer);
		mntmUpdate.addActionListener(updateOrganizerAction);
		JMenuItem mntmSearchOrganizer = new JMenuItem("Search");
		mnOrganizer.add(mntmSearchOrganizer);
		mntmSearch.addActionListener(searchOrganizerAction);
		JMenuItem mntmRemoveOrganizer = new JMenuItem("Remove");
		mnOrganizer.add(mntmRemoveOrganizer);
		mntmRemove.addActionListener(removeOrganizerAction);
		JMenuItem mntmListAllOrganizer = new JMenuItem("ListAll");
		mnOrganizer.add(mntmListAllOrganizer);
		mntmListAll.addActionListener(listallOrganizerAction);
		JMenu mnReviewer = new JMenu("Reviewer");
		menuBar.add(mnReviewer);
		JMenuItem mntmInsertReviewer = new JMenuItem("Insert");
		mnReviewer.add(mntmInsertReviewer);
		mntmInsert.addActionListener(insertReviewerAction);
		JMenuItem mntmUpdateReviewer = new JMenuItem("Update");
		mnReviewer.add(mntmUpdateReviewer);
		mntmUpdate.addActionListener(updateReviewerAction);
		JMenuItem mntmSearchReviewer = new JMenuItem("Search");
		mnReviewer.add(mntmSearchReviewer);
		mntmSearch.addActionListener(searchReviewerAction);
		JMenuItem mntmRemoveReviewer = new JMenuItem("Remove");
		mnReviewer.add(mntmRemoveReviewer);
		mntmRemove.addActionListener(removeReviewerAction);
		JMenuItem mntmListAllReviewer = new JMenuItem("ListAll");
		mnReviewer.add(mntmListAllReviewer);
		mntmListAll.addActionListener(listallReviewerAction);
		JMenu mnEvent = new JMenu("Event");
		menuBar.add(mnEvent);
		JMenuItem mntmInsertEvent = new JMenuItem("Insert");
		mnEvent.add(mntmInsertEvent);
		mntmInsert.addActionListener(insertEventAction);
		JMenuItem mntmUpdateEvent = new JMenuItem("Update");
		mnEvent.add(mntmUpdateEvent);
		mntmUpdate.addActionListener(updateEventAction);
		JMenuItem mntmSearchEvent = new JMenuItem("Search");
		mnEvent.add(mntmSearchEvent);
		mntmSearch.addActionListener(searchEventAction);
		JMenuItem mntmRemoveEvent = new JMenuItem("Remove");
		mnEvent.add(mntmRemoveEvent);
		mntmRemove.addActionListener(removeEventAction);
		JMenuItem mntmListAllEvent = new JMenuItem("ListAll");
		mnEvent.add(mntmListAllEvent);
		mntmListAll.addActionListener(listallEventAction);
		JMenu mnReports = new JMenu("Reports");
		menuBar.add(mnReports);
		
		mntmExit.addActionListener(exitMenuAction);
	}
	
	private class ExitMenuAction  implements ActionListener{ 

		@Override
		public void actionPerformed(ActionEvent e) {
			dispose();
		}
	} 

	private class InsertUserMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenInsertUser = UserInsertScreenP.getInstanceUserInsertScreenP();
			if(screenInsertUser.getParent() == null){
				desktopPane.add(screenInsertUser);
			}
			screenInsertUser.setVisible(true);
			desktopPane.moveToFront(screenInsertUser);
			try {
				screenInsertUser.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class UpdateUserMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenUpdateUser = UserUpdateScreenP.getInstanceUserUpdateScreenP();
			if(screenUpdateUser.getParent() == null){
				desktopPane.add(screenUpdateUser);
			}
			screenUpdateUser.setVisible(true);
			desktopPane.moveToFront(screenUpdateUser);
			try {
				screenUpdateUser.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class SearchUserMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenSearchUser = UserSearchScreenP.getInstanceUserSearchScreenP();
			if(screenSearchUser.getParent() == null){
				desktopPane.add(screenSearchUser);
			}
			screenSearchUser.setVisible(true);
			desktopPane.moveToFront(screenSearchUser);
			try {
				screenSearchUser.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class RemoveUserMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenRemoveUser = UserRemoveScreenP.getInstanceUserRemoveScreenP();
			if(screenRemoveUser.getParent() == null){
				desktopPane.add(screenRemoveUser);
			}
			screenRemoveUser.setVisible(true);
			desktopPane.moveToFront(screenRemoveUser);
			try {
				screenRemoveUser.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class ListAllUserMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenListAllUser = UserListAllScreenP.getInstanceUserListAllScreenP();
			if(screenListAllUser.getParent() == null){
				desktopPane.add(screenListAllUser);
			}
			screenListAllUser.setVisible(true);
			desktopPane.moveToFront(screenListAllUser);
			try {
				screenListAllUser.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class InsertSpeakerMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenInsertSpeaker = SpeakerInsertScreenP.getInstanceSpeakerInsertScreenP();
			if(screenInsertSpeaker.getParent() == null){
				desktopPane.add(screenInsertSpeaker);
			}
			screenInsertSpeaker.setVisible(true);
			desktopPane.moveToFront(screenInsertSpeaker);
			try {
				screenInsertSpeaker.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class UpdateSpeakerMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenUpdateSpeaker = SpeakerUpdateScreenP.getInstanceSpeakerUpdateScreenP();
			if(screenUpdateSpeaker.getParent() == null){
				desktopPane.add(screenUpdateSpeaker);
			}
			screenUpdateSpeaker.setVisible(true);
			desktopPane.moveToFront(screenUpdateSpeaker);
			try {
				screenUpdateSpeaker.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class SearchSpeakerMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenSearchSpeaker = SpeakerSearchScreenP.getInstanceSpeakerSearchScreenP();
			if(screenSearchSpeaker.getParent() == null){
				desktopPane.add(screenSearchSpeaker);
			}
			screenSearchSpeaker.setVisible(true);
			desktopPane.moveToFront(screenSearchSpeaker);
			try {
				screenSearchSpeaker.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class RemoveSpeakerMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenRemoveSpeaker = SpeakerRemoveScreenP.getInstanceSpeakerRemoveScreenP();
			if(screenRemoveSpeaker.getParent() == null){
				desktopPane.add(screenRemoveSpeaker);
			}
			screenRemoveSpeaker.setVisible(true);
			desktopPane.moveToFront(screenRemoveSpeaker);
			try {
				screenRemoveSpeaker.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class ListAllSpeakerMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenListAllSpeaker = SpeakerListAllScreenP.getInstanceSpeakerListAllScreenP();
			if(screenListAllSpeaker.getParent() == null){
				desktopPane.add(screenListAllSpeaker);
			}
			screenListAllSpeaker.setVisible(true);
			desktopPane.moveToFront(screenListAllSpeaker);
			try {
				screenListAllSpeaker.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class InsertOrganizerMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenInsertOrganizer = OrganizerInsertScreenP.getInstanceOrganizerInsertScreenP();
			if(screenInsertOrganizer.getParent() == null){
				desktopPane.add(screenInsertOrganizer);
			}
			screenInsertOrganizer.setVisible(true);
			desktopPane.moveToFront(screenInsertOrganizer);
			try {
				screenInsertOrganizer.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class UpdateOrganizerMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenUpdateOrganizer = OrganizerUpdateScreenP.getInstanceOrganizerUpdateScreenP();
			if(screenUpdateOrganizer.getParent() == null){
				desktopPane.add(screenUpdateOrganizer);
			}
			screenUpdateOrganizer.setVisible(true);
			desktopPane.moveToFront(screenUpdateOrganizer);
			try {
				screenUpdateOrganizer.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class SearchOrganizerMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenSearchOrganizer = OrganizerSearchScreenP.getInstanceOrganizerSearchScreenP();
			if(screenSearchOrganizer.getParent() == null){
				desktopPane.add(screenSearchOrganizer);
			}
			screenSearchOrganizer.setVisible(true);
			desktopPane.moveToFront(screenSearchOrganizer);
			try {
				screenSearchOrganizer.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class RemoveOrganizerMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenRemoveOrganizer = OrganizerRemoveScreenP.getInstanceOrganizerRemoveScreenP();
			if(screenRemoveOrganizer.getParent() == null){
				desktopPane.add(screenRemoveOrganizer);
			}
			screenRemoveOrganizer.setVisible(true);
			desktopPane.moveToFront(screenRemoveOrganizer);
			try {
				screenRemoveOrganizer.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class ListAllOrganizerMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenListAllOrganizer = OrganizerListAllScreenP.getInstanceOrganizerListAllScreenP();
			if(screenListAllOrganizer.getParent() == null){
				desktopPane.add(screenListAllOrganizer);
			}
			screenListAllOrganizer.setVisible(true);
			desktopPane.moveToFront(screenListAllOrganizer);
			try {
				screenListAllOrganizer.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class InsertReviewerMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenInsertReviewer = ReviewerInsertScreenP.getInstanceReviewerInsertScreenP();
			if(screenInsertReviewer.getParent() == null){
				desktopPane.add(screenInsertReviewer);
			}
			screenInsertReviewer.setVisible(true);
			desktopPane.moveToFront(screenInsertReviewer);
			try {
				screenInsertReviewer.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class UpdateReviewerMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenUpdateReviewer = ReviewerUpdateScreenP.getInstanceReviewerUpdateScreenP();
			if(screenUpdateReviewer.getParent() == null){
				desktopPane.add(screenUpdateReviewer);
			}
			screenUpdateReviewer.setVisible(true);
			desktopPane.moveToFront(screenUpdateReviewer);
			try {
				screenUpdateReviewer.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class SearchReviewerMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenSearchReviewer = ReviewerSearchScreenP.getInstanceReviewerSearchScreenP();
			if(screenSearchReviewer.getParent() == null){
				desktopPane.add(screenSearchReviewer);
			}
			screenSearchReviewer.setVisible(true);
			desktopPane.moveToFront(screenSearchReviewer);
			try {
				screenSearchReviewer.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class RemoveReviewerMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenRemoveReviewer = ReviewerRemoveScreenP.getInstanceReviewerRemoveScreenP();
			if(screenRemoveReviewer.getParent() == null){
				desktopPane.add(screenRemoveReviewer);
			}
			screenRemoveReviewer.setVisible(true);
			desktopPane.moveToFront(screenRemoveReviewer);
			try {
				screenRemoveReviewer.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class ListAllReviewerMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenListAllReviewer = ReviewerListAllScreenP.getInstanceReviewerListAllScreenP();
			if(screenListAllReviewer.getParent() == null){
				desktopPane.add(screenListAllReviewer);
			}
			screenListAllReviewer.setVisible(true);
			desktopPane.moveToFront(screenListAllReviewer);
			try {
				screenListAllReviewer.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class InsertEventMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenInsertEvent = EventInsertScreenP.getInstanceEventInsertScreenP();
			if(screenInsertEvent.getParent() == null){
				desktopPane.add(screenInsertEvent);
			}
			screenInsertEvent.setVisible(true);
			desktopPane.moveToFront(screenInsertEvent);
			try {
				screenInsertEvent.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class UpdateEventMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenUpdateEvent = EventUpdateScreenP.getInstanceEventUpdateScreenP();
			if(screenUpdateEvent.getParent() == null){
				desktopPane.add(screenUpdateEvent);
			}
			screenUpdateEvent.setVisible(true);
			desktopPane.moveToFront(screenUpdateEvent);
			try {
				screenUpdateEvent.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class SearchEventMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenSearchEvent = EventSearchScreenP.getInstanceEventSearchScreenP();
			if(screenSearchEvent.getParent() == null){
				desktopPane.add(screenSearchEvent);
			}
			screenSearchEvent.setVisible(true);
			desktopPane.moveToFront(screenSearchEvent);
			try {
				screenSearchEvent.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class RemoveEventMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenRemoveEvent = EventRemoveScreenP.getInstanceEventRemoveScreenP();
			if(screenRemoveEvent.getParent() == null){
				desktopPane.add(screenRemoveEvent);
			}
			screenRemoveEvent.setVisible(true);
			desktopPane.moveToFront(screenRemoveEvent);
			try {
				screenRemoveEvent.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	private class ListAllEventMenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screenListAllEvent = EventListAllScreenP.getInstanceEventListAllScreenP();
			if(screenListAllEvent.getParent() == null){
				desktopPane.add(screenListAllEvent);
			}
			screenListAllEvent.setVisible(true);
			desktopPane.moveToFront(screenListAllEvent);
			try {
				screenListAllEvent.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}

				//#if ${Bugs} == "T"
				private class BugtrackScreenMenuAction  implements ActionListener{ 

					@Override
					public void actionPerformed(ActionEvent e) {
						screenBugtrack = BugtrackScreenP.getInstanceBugtrackScreenP();
						//desktopPane.add(screenBugtrack);
						if(screenBugtrack.getParent() == null){
							desktopPane.add(screenBugtrack);
						}
						screenBugtrack.setVisible(true);
						desktopPane.moveToFront(screenBugtrack);
						try {
							screenBugtrack.setSelected(true);
						} catch (PropertyVetoException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}  
				}
				//#endif
}