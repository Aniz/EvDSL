// Autogenerated by EvDSL
package riseevents.ev.facade;
import riseevents.ev.util.LibraryOfDSL;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Set;

import org.apache.commons.mail.EmailException;
import riseevents.ev.util.Email;
import riseevents.ev.data.User;
import riseevents.ev.business.UserControl;
import riseevents.ev.exception.UserAlreadyInsertedException;
import riseevents.ev.exception.UserNotFoundException;
import riseevents.ev.repository.UserRepository;
import riseevents.ev.repository.UserRepositoryBDR;
import riseevents.ev.data.Speaker;
import riseevents.ev.business.SpeakerControl;
import riseevents.ev.exception.SpeakerAlreadyInsertedException;
import riseevents.ev.exception.SpeakerNotFoundException;
import riseevents.ev.repository.SpeakerRepository;
import riseevents.ev.repository.SpeakerRepositoryBDR;
import riseevents.ev.data.Organizer;
import riseevents.ev.business.OrganizerControl;
import riseevents.ev.exception.OrganizerAlreadyInsertedException;
import riseevents.ev.exception.OrganizerNotFoundException;
import riseevents.ev.repository.OrganizerRepository;
import riseevents.ev.repository.OrganizerRepositoryBDR;
import riseevents.ev.data.Activity;
import riseevents.ev.business.ActivityControl;
import riseevents.ev.exception.ActivityAlreadyInsertedException;
import riseevents.ev.exception.ActivityNotFoundException;
import riseevents.ev.repository.ActivityRepository;
import riseevents.ev.repository.ActivityRepositoryBDR;
import riseevents.ev.data.Event;
import riseevents.ev.business.EventControl;
import riseevents.ev.exception.EventAlreadyInsertedException;
import riseevents.ev.exception.EventNotFoundException;
import riseevents.ev.repository.EventRepository;
import riseevents.ev.repository.EventRepositoryBDR;
import riseevents.ev.exception.RepositoryException;
import com.lowagie.text.DocumentException;

import riseevents.ev.data.ActivityUser;
import riseevents.ev.business.ActivityUserControl;
import riseevents.ev.exception.ActivityUserAlreadyInsertedException;
import riseevents.ev.exception.ActivityUserNotFoundException;
import riseevents.ev.repository.ActivityUserRepository;
import riseevents.ev.repository.ActivityUserRepositoryBDR;
import riseevents.ev.data.ActivitySpeaker;
import riseevents.ev.business.ActivitySpeakerControl;
import riseevents.ev.exception.ActivitySpeakerAlreadyInsertedException;
import riseevents.ev.exception.ActivitySpeakerNotFoundException;
import riseevents.ev.repository.ActivitySpeakerRepository;
import riseevents.ev.repository.ActivitySpeakerRepositoryBDR;
import riseevents.ev.data.ActivityOrganizer;
import riseevents.ev.business.ActivityOrganizerControl;
import riseevents.ev.exception.ActivityOrganizerAlreadyInsertedException;
import riseevents.ev.exception.ActivityOrganizerNotFoundException;
import riseevents.ev.repository.ActivityOrganizerRepository;
import riseevents.ev.repository.ActivityOrganizerRepositoryBDR;
import riseevents.ev.data.Registration;
import riseevents.ev.business.RegistrationControl;
import riseevents.ev.exception.RegistrationAlreadyInsertedException;
import riseevents.ev.exception.RegistrationNotFoundException;
import riseevents.ev.repository.RegistrationRepository;
import riseevents.ev.repository.RegistrationRepositoryBDR;

public class RiseEventsFacade {

	private UserControl userList;
	private SpeakerControl speakerList;
	private OrganizerControl organizerList;
	private ActivityControl activityList;
	private EventControl eventList;

	protected static RiseEventsFacade instance;
	
	public RiseEventsFacade(){
		UserRepository userRepository = UserRepositoryBDR.getInstance();
		SpeakerRepository speakerRepository = SpeakerRepositoryBDR.getInstance();
		OrganizerRepository organizerRepository = OrganizerRepositoryBDR.getInstance();
		ActivityRepository activityRepository = ActivityRepositoryBDR.getInstance();
		EventRepository eventRepository = EventRepositoryBDR.getInstance();
		
		userList = new UserControl(userRepository); 
		speakerList = new SpeakerControl(speakerRepository); 
		organizerList = new OrganizerControl(organizerRepository); 
		activityList = new ActivityControl(activityRepository); 
		eventList = new EventControl(eventRepository); 
	
	}
	
	public static RiseEventsFacade getInstance()  {
		if (RiseEventsFacade.instance == null) {
			RiseEventsFacade.instance = new RiseEventsFacade();
		}
		return RiseEventsFacade.instance;
	}
	
	public void insertUser(User entity) throws UserAlreadyInsertedException, RepositoryException{
		this.userList.insert(entity);
	}
	public void removeUser(int idEntity) throws UserNotFoundException, RepositoryException, UserAlreadyInsertedException{
		userList.remove(idEntity);  
	}
	public void updateUser(User Entity) throws UserNotFoundException, Exception, UserAlreadyInsertedException{
		userList.update(Entity);
	}
	public List<User> getUserList() throws RepositoryException{
		return userList.getUserList();
	}
	public User searchUser(int idEntity) throws UserNotFoundException, RepositoryException, UserAlreadyInsertedException{
		return userList.search(idEntity);
	}
	public int getUserIdByName(String entityName) throws RepositoryException{
		return userList.getUserIdByName(entityName);
	}
	public boolean isThereUser(int idEntity) throws RepositoryException{
		return userList.isThere(idEntity);
	}
	public void insertSpeaker(Speaker entity) throws SpeakerAlreadyInsertedException, RepositoryException{
		this.speakerList.insert(entity);
	}
	public void removeSpeaker(int idEntity) throws SpeakerNotFoundException, RepositoryException, SpeakerAlreadyInsertedException{
		speakerList.remove(idEntity);  
	}
	public void updateSpeaker(Speaker Entity) throws SpeakerNotFoundException, Exception, SpeakerAlreadyInsertedException{
		speakerList.update(Entity);
	}
	public List<Speaker> getSpeakerList() throws RepositoryException{
		return speakerList.getSpeakerList();
	}
	public Speaker searchSpeaker(int idEntity) throws SpeakerNotFoundException, RepositoryException, SpeakerAlreadyInsertedException{
		return speakerList.search(idEntity);
	}
	public boolean isThereSpeaker(int idEntity) throws RepositoryException{
		return speakerList.isThere(idEntity);
	}
	public void insertOrganizer(Organizer entity) throws OrganizerAlreadyInsertedException, RepositoryException{
		this.organizerList.insert(entity);
	}
	public void removeOrganizer(int idEntity) throws OrganizerNotFoundException, RepositoryException, OrganizerAlreadyInsertedException{
		organizerList.remove(idEntity);  
	}
	public void updateOrganizer(Organizer Entity) throws OrganizerNotFoundException, Exception, OrganizerAlreadyInsertedException{
		organizerList.update(Entity);
	}
	public List<Organizer> getOrganizerList() throws RepositoryException{
		return organizerList.getOrganizerList();
	}
	public Organizer searchOrganizer(int idEntity) throws OrganizerNotFoundException, RepositoryException, OrganizerAlreadyInsertedException{
		return organizerList.search(idEntity);
	}
	public boolean isThereOrganizer(int idEntity) throws RepositoryException{
		return organizerList.isThere(idEntity);
	}
	public void insertActivity(Activity entity) throws ActivityAlreadyInsertedException, RepositoryException{
		this.activityList.insert(entity);
	}
	public void removeActivity(int idEntity) throws ActivityNotFoundException, RepositoryException, ActivityAlreadyInsertedException{
		activityList.remove(idEntity);  
	}
	public void updateActivity(Activity Entity) throws ActivityNotFoundException, Exception, ActivityAlreadyInsertedException{
		activityList.update(Entity);
	}
	public List<Activity> getActivityList() throws RepositoryException{
		return activityList.getActivityList();
	}
	public Activity searchActivity(int idEntity) throws ActivityNotFoundException, RepositoryException, ActivityAlreadyInsertedException{
		return activityList.search(idEntity);
	}
	public int getActivityIdByName(String entityName) throws RepositoryException{
		return activityList.getActivityIdByName(entityName);
	}
	public int getActivityLastId() throws RepositoryException{
		return activityList.getActivityLastId();
	}
	public boolean isThereActivity(int idEntity) throws RepositoryException{
		return activityList.isThere(idEntity);
	}
	public void insertEvent(Event entity) throws EventAlreadyInsertedException, RepositoryException{
		this.eventList.insert(entity);
	}
	public void removeEvent(int idEntity) throws EventNotFoundException, RepositoryException, EventAlreadyInsertedException{
		eventList.remove(idEntity);  
	}
	public void updateEvent(Event Entity) throws EventNotFoundException, Exception, EventAlreadyInsertedException{
		eventList.update(Entity);
	}
	public List<Event> getEventList() throws RepositoryException{
		return eventList.getEventList();
	}
	public Event searchEvent(int idEntity) throws EventNotFoundException, RepositoryException, EventAlreadyInsertedException{
		return eventList.search(idEntity);
	}
	public int getEventIdByName(String entityName) throws RepositoryException{
		return eventList.getEventIdByName(entityName);
	}
	public int getEventLastId() throws RepositoryException{
		return eventList.getEventLastId();
	}
	public boolean isThereEvent(int idEntity) throws RepositoryException{
		return eventList.isThere(idEntity);
	}
	
	
	
	
	public float getEventMainTrackValue(int idEvent) throws RepositoryException{
		return activityList.getEventMainTrackValue(idEvent);
	}
	
	public int getActivityMainTrackId(int idEvent) throws RepositoryException{
		return activityList.getActivityMainTrackId(idEvent);
	}
	
	public int getEventbyActivity(int idActivity) throws RepositoryException{
		return activityList.getEventbyActivity(idActivity);
	}
	

	public List<Activity> getActivityList() throws RepositoryException{
		return activityList.getActivityList();
	}
	
	
}