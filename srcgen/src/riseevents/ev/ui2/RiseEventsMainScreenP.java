// Autogenerated by EvDSL
package riseevents.ev.ui2;
import riseevents.ev.util.LibraryOfDSL;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyVetoException;

import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.WindowConstants;
import javax.swing.border.EmptyBorder;

import riseevents.ev.facade.RiseEventsFacade;

public class RiseEventsMainScreenP extends JFrame {

	private JPanel contentPane;
	
    public static RiseEventsFacade facade; // caso a variabilidade de tela login seja retirada o sistema deve iniciar dessa tela
	
	private static RiseEventsMainScreenP instanceRiseEventsMainScreenP;      
	
	private UserSendBugTrackEmailScreenP screenUserSendBugTrackEmail;	
	private EventProgramScreenP screenEventProgram;	
	private EventImportantDatesScreenP screenEventImportantDates;	
	private EventReportsFrequencyPerEventScreenP screenEventReportsFrequencyPerEvent;	
	private ActivityReportsListofAuthorsScreenP screenActivityReportsListofAuthors;	

	
	private ReviewInsertScreenP screenInsertReview;
	private ReviewRemoveScreenP screenRemoveReview;
	private ReviewUpdateScreenP screenUpdateReview;
	private ReviewSearchScreenP screenSearchReview;
	private ReviewListAllScreenP screenListAllReview;
	private ReviewManagementScreenP screenManagementReview;
	// private ReviewResultsScreenP screenResultsReview;

               
	private ActivityUserManagementScreenP screenManagementActivityUser;

	

               
	private ActivitySpeakerManagementScreenP screenManagementActivitySpeaker;

	


	


	


	


	

	private RegistrationInsertScreenP screenInsertRegistration;
	private RegistrationSearchScreenP screenSearchRegistration;
	private RegistrationListAllScreenP screenListAllRegistration;
	private RegistrationManagementScreenP screenManagementRegistration;
	private RegistrationUpdateScreenP screenUpdateRegistration;
	private RegistrationRemoveScreenP screenRemoveRegistration;

	private AssignmentInsertScreenP screenInsertAssignment;
	private AssignmentRemoveScreenP screenRemoveAssignment;
	private AssignmentListAllScreenP screenListAllAssignment;
	private AssignmentSearchScreenP screenSearchAssignment;
	private AssignmentManagementScreenP screenManagementAssignment;
	

	
	private static JLabel labelImagem;
	
	private JDesktopPane desktopPane;
	
	
	public static RiseEventsFacade getFacade(){
		return RiseEventsFacade.getInstance();
	}
	
	public static RiseEventsMainScreenP getInstanceRiseEventsMainScreenP() {
		if (instanceRiseEventsMainScreenP == null) {
			RiseEventsMainScreenP.instanceRiseEventsMainScreenP = new RiseEventsMainScreenP();
		}
		return RiseEventsMainScreenP.instanceRiseEventsMainScreenP;
	}

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					RiseEventsMainScreenP frame = new RiseEventsMainScreenP();
					frame.setVisible(true);
					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public RiseEventsMainScreenP() {
		
		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		
		ExitMenuAction exitMenuAction = new ExitMenuAction();
		
		UserSendBugTrackEmailMenuAction userSendBugTrackEmailAction = new UserSendBugTrackEmailMenuAction();	
		EventProgramMenuAction eventProgramAction = new EventProgramMenuAction();	
		EventImportantDatesMenuAction eventImportantDatesAction = new EventImportantDatesMenuAction();	
		EventReportsFrequencyPerEventMenuAction eventReportsFrequencyPerEventAction = new EventReportsFrequencyPerEventMenuAction();	
		ActivityReportsListofAuthorsMenuAction activityReportsListofAuthorsAction = new ActivityReportsListofAuthorsMenuAction();	

		RiseEventsMainScreenP.facade = RiseEventsFacade.getInstance();
		
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 1120, 691);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		desktopPane = new JDesktopPane();
		desktopPane.setBackground(Color.LIGHT_GRAY);
		desktopPane.setBounds(6, 36, 1104, 624);
		contentPane.add(desktopPane);
		
		labelImagem = new JLabel("");
		labelImagem.setBounds(210, 164, 648, 193);
		ImageIcon image = new ImageIcon(getClass().getResource("/images/riseLabs.png"));
		Image imag = image.getImage().getScaledInstance(labelImagem.getWidth(), labelImagem.getHeight(), Image.SCALE_SMOOTH);
		labelImagem.setIcon(new ImageIcon(imag));
		desktopPane.add(labelImagem);
		
		JMenuBar menuBar = new JMenuBar();
		menuBar.setBounds(32, 12, 1078, 22);
		contentPane.add(menuBar);
		
		JMenu mnArchieve = new JMenu("Archieve");
		menuBar.add(mnArchieve);
		
		//#if ${Bugs} == "T"		
		JMenuItem mntmBugtrack = new JMenuItem("Bugtrack");
		mnArchieve.add(mntmBugtrack);
		//#endif
		
		JMenuItem mntmExit = new JMenuItem("Exit");
		mnArchieve.add(mntmExit);

		JMenu mnUser = new JMenu("User");
		menuBar.add(mnUser);
		JMenuItem mntmUserSendBugTrackEmail = new JMenuItem("sendBugTrackEmail");
		mnUser.add(mntmUserSendBugTrackEmail);
		mntmUserSendBugTrackEmail.addActionListener(userSendBugTrackEmailAction);
		JMenu mnOrganizer = new JMenu("Organizer");
		menuBar.add(mnOrganizer);
		JMenu mnReviewer = new JMenu("Reviewer");
		menuBar.add(mnReviewer);
		JMenu mnSpeaker = new JMenu("Speaker");
		menuBar.add(mnSpeaker);
		JMenu mnEvent = new JMenu("Event");
		menuBar.add(mnEvent);
		JMenuItem mntmEventProgram = new JMenuItem("program");
		mnEvent.add(mntmEventProgram);
		mntmEventProgram.addActionListener(eventProgramAction);
		JMenuItem mntmEventImportantDates = new JMenuItem("importantDates");
		mnEvent.add(mntmEventImportantDates);
		mntmEventImportantDates.addActionListener(eventImportantDatesAction);
		JMenuItem mntmEventReportsFrequencyPerEvent = new JMenuItem("reportsFrequencyPerEvent");
		mnEvent.add(mntmEventReportsFrequencyPerEvent);
		mntmEventReportsFrequencyPerEvent.addActionListener(eventReportsFrequencyPerEventAction);
		JMenu mnPayment = new JMenu("Payment");
		menuBar.add(mnPayment);
		JMenu mnActivity = new JMenu("Activity");
		menuBar.add(mnActivity);
		JMenuItem mntmActivityReportsListofAuthors = new JMenuItem("reportsListofAuthors");
		mnActivity.add(mntmActivityReportsListofAuthors);
		mntmActivityReportsListofAuthors.addActionListener(activityReportsListofAuthorsAction);
		JMenu mnSubmission = new JMenu("Submission");
		menuBar.add(mnSubmission);
		JMenu mnAuthor = new JMenu("Author");
		menuBar.add(mnAuthor);
		JMenu mnCheckingCopy = new JMenu("CheckingCopy");
		menuBar.add(mnCheckingCopy);
		JMenu mnNewOption = new JMenu("NewOption");
		menuBar.add(mnNewOption);
		JMenu mnReceipt = new JMenu("Receipt");
		menuBar.add(mnReceipt);
		JMenu mnReports = new JMenu("Reports");
		menuBar.add(mnReports);
		
		mntmExit.addActionListener(exitMenuAction);
	}
	
	private class ExitMenuAction  implements ActionListener{ 

		@Override
		public void actionPerformed(ActionEvent e) {
			dispose();
		}
	} 

			private class UserSendBugTrackEmailMenuAction implements ActionListener{
			@Override
			public void actionPerformed(ActionEvent e) {
				screenUserSendBugTrackEmail = UserSendBugTrackEmailScreenP.getInstanceUserSendBugTrackEmailScreenP();
				if(screenUserSendBugTrackEmail.getParent() == null){
					desktopPane.add(screenUserSendBugTrackEmail);
				}
				screenUserSendBugTrackEmail.setVisible(true);
				desktopPane.moveToFront(screenUserSendBugTrackEmail);
				try {
					screenUserSendBugTrackEmail.setSelected(true);
				} catch (PropertyVetoException e1) {
					e1.printStackTrace();
					}
				}  
			}
			private class EventProgramMenuAction implements ActionListener{
			@Override
			public void actionPerformed(ActionEvent e) {
				screenEventProgram = EventProgramScreenP.getInstanceEventProgramScreenP();
				if(screenEventProgram.getParent() == null){
					desktopPane.add(screenEventProgram);
				}
				screenEventProgram.setVisible(true);
				desktopPane.moveToFront(screenEventProgram);
				try {
					screenEventProgram.setSelected(true);
				} catch (PropertyVetoException e1) {
					e1.printStackTrace();
					}
				}  
			}
			private class EventImportantDatesMenuAction implements ActionListener{
			@Override
			public void actionPerformed(ActionEvent e) {
				screenEventImportantDates = EventImportantDatesScreenP.getInstanceEventImportantDatesScreenP();
				if(screenEventImportantDates.getParent() == null){
					desktopPane.add(screenEventImportantDates);
				}
				screenEventImportantDates.setVisible(true);
				desktopPane.moveToFront(screenEventImportantDates);
				try {
					screenEventImportantDates.setSelected(true);
				} catch (PropertyVetoException e1) {
					e1.printStackTrace();
					}
				}  
			}
			private class EventReportsFrequencyPerEventMenuAction implements ActionListener{
			@Override
			public void actionPerformed(ActionEvent e) {
				screenEventReportsFrequencyPerEvent = EventReportsFrequencyPerEventScreenP.getInstanceEventReportsFrequencyPerEventScreenP();
				if(screenEventReportsFrequencyPerEvent.getParent() == null){
					desktopPane.add(screenEventReportsFrequencyPerEvent);
				}
				screenEventReportsFrequencyPerEvent.setVisible(true);
				desktopPane.moveToFront(screenEventReportsFrequencyPerEvent);
				try {
					screenEventReportsFrequencyPerEvent.setSelected(true);
				} catch (PropertyVetoException e1) {
					e1.printStackTrace();
					}
				}  
			}
			private class ActivityReportsListofAuthorsMenuAction implements ActionListener{
			@Override
			public void actionPerformed(ActionEvent e) {
				screenActivityReportsListofAuthors = ActivityReportsListofAuthorsScreenP.getInstanceActivityReportsListofAuthorsScreenP();
				if(screenActivityReportsListofAuthors.getParent() == null){
					desktopPane.add(screenActivityReportsListofAuthors);
				}
				screenActivityReportsListofAuthors.setVisible(true);
				desktopPane.moveToFront(screenActivityReportsListofAuthors);
				try {
					screenActivityReportsListofAuthors.setSelected(true);
				} catch (PropertyVetoException e1) {
					e1.printStackTrace();
					}
				}  
			}
}