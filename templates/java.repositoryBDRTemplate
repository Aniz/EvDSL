// Autogenerated by EvDSL

package {{systemName|lower}}.ev.repository;
import {{systemName|lower}}.ev.util.LibraryOfDSL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import {{systemName|lower}}.ev.data.{{data.option.entity}};
import {{systemName|lower}}.ev.exception.{{data.option.entity}}NotFoundException;
import {{systemName|lower}}.ev.exception.{{data.option.entity}}AlreadyInsertedException;
import {{systemName|lower}}.ev.exception.RepositoryException;
import {{systemName|lower}}.ev.util.PersistenceMechanismException;
import {{systemName|lower}}.ev.util.PersistenceMechanismRDBMS;
{% if data.option.categories|length > 0 %}
import {{systemName|lower}}.ev.data.{{data.option.entity}}.Type{{data.option.entity}};
{% endif %}

public class {{data.option.entity}}RepositoryBDR implements {{data.option.entity}}Repository{

	
	private static {{data.option.entity}}RepositoryBDRBDR instance;
	private PersistenceMechanismRDBMS pm;
	
	public {{data.option.entity}}RepositoryBDRBDR(){
		try{
			pm = PersistenceMechanismRDBMS.getInstance();
			pm.connect();
		}catch(Exception ex){
			ex.printStackTrace();
		}
	}
	
	public synchronized static {{data.option.entity}}RepositoryBDRBDR getInstance(){
		if(instance == null){
			instance = new {{data.option.entity}}RepositoryBDRBDR();
		}
		return instance;
	}
	
	@Override
	public void insert({{data.option.entity}} {{data.option.entity|lower}}) throws RepositoryException{
		try {
			Statement statement = (Statement) pm.getCommunicationChannel();
			statement.executeUpdate("INSERT INTO {{data.option.entity}} ({% if data.option.properties|length > 0 %}{% for property in data.option.properties %}{% if loop.first %}{{property.name}}{% else %},{{property.name}}{% endif %}{% endfor %}{% endif %}{% if data.option.categories|length > 0 %},type{{data.option.entity}}{% endif %}) Values('" +
					{% if data.option.properties|length > 0 %}{% for property in data.option.properties %}{% if loop.first %}{{data.option.entity|lower}}.get{{property.name|capitalize}}(){% else %}+"','"+ {{data.option.entity|lower}}.get{{property.name|capitalize}}(){% endif %}{% endfor %}{% endif %}{% if data.option.categories|length > 0 %}+"','"+{{data.option.entity|lower}}.getType{{data.option.entity}}(){% endif %}+"')");
		
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (PersistenceMechanismException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			try {
				pm.releaseCommunicationChannel();
			} catch (PersistenceMechanismException ex) {
				throw new RepositoryException(ex);
			}
		}
		
	}

	@Override
	public void remove({{data.option.entity}} {{data.option.entity|lower}}) throws {{data.option.entity}}NotFoundException,
			RepositoryException {
		try{
            Statement statement = (Statement) pm.getCommunicationChannel();
		    int i = statement.executeUpdate("DELETE FROM {{data.option.entity}} WHERE id{{data.option.entity}} = '"+ {{data.option.entity|lower}}.getId{{data.option.entity}}()+"'"); 
		    if (i == 0) {
            	throw new {{data.option.entity}}NotFoundException({{data.option.entity}}.getId{{data.option.entity}}());
            }
		} catch(PersistenceMechanismException e){
            throw new RepositoryException(e);
		} catch(SQLException e){
            throw new RepositoryException(e);            
		} finally {
			try {
				pm.releaseCommunicationChannel();
			} catch (PersistenceMechanismException ex) {
				throw new RepositoryException(ex);
			}
		}
		
	}

	@Override
	public {{data.option.entity}} search(int idEntity) throws {{data.option.entity}}NotFoundException,
			RepositoryException {
		{{data.option.entity}} {{data.option.entity}} = null;
		{{data.option.entity}} = new {{data.option.entity}}();
        try {
            Statement statement = (Statement) pm.getCommunicationChannel();
            ResultSet resultset = statement.executeQuery("Select * from {{data.option.entity}} WHERE id{{data.option.entity}} =" + idEntity);
            if (resultset.next()) {  	
           	{% if data.option.categories|length > 0 %}
    			{{data.option.entity|lower}}.setType{{data.option.entity}}(Type{{data.option.entity}}.valueOf(resultset.getString("type{{data.option.entity}}")));
    		{% endif %}
			{% if data.option.properties|length > 0 %}{% for property in data.option.properties %}
				{{data.option.entity|lower}}.set{{property.name|capitalize}}(resultset.get{% if property.type|javatype == 'int' %}Int{% else %}{{property.type|javatype}}{% endif %}("{{property.name}}"));
			{% endfor %}{% endif %}	
		     } else {
            	throw new {{data.option.entity}}NotFoundException(idEntity);
            }
			resultset.close();
		} catch(PersistenceMechanismException e){
            throw new RepositoryException(e);
        } catch (SQLException e) {
			throw new RepositoryException(e);
		} finally {
			try {
				pm.releaseCommunicationChannel();
			} catch (PersistenceMechanismException ex) {
				throw new RepositoryException(ex);
			}
		}
		return {{data.option.entity|lower}};
	}

	@Override
	public List<{{data.option.entity}}> get{{data.option.entity}}List() throws RepositoryException {
		{{data.option.entity}} activity=null;
		ArrayList<{{data.option.entity}}> list = new ArrayList<{{data.option.entity}}>();
        try {
            Statement statement = (Statement) pm.getCommunicationChannel();
            ResultSet resultset = statement.executeQuery("select * from {{data.option.entity}}");
            while (resultset.next()) {
            	{{data.option.entity|lower}} = new {{data.option.entity}}();
            {% if data.option.categories|length > 0 %}
    			{{data.option.entity|lower}}.setType{{data.option.entity}}(Type{{data.option.entity}}.valueOf(resultset.getString("type{{data.option.entity}}")));
    		{% endif %}
			{% if data.option.properties|length > 0 %}{% for property in data.option.properties %}
				{{data.option.entity|lower}}.set{{property.name|capitalize}}(resultset.get{% if property.type|javatype == 'int' %}Int{% else %}{{property.type|javatype}}{% endif %}("{{property.name}}"));
			{% endfor %}{% endif %}	
				list.add({{data.option.entity|lower}});
            } 
			resultset.close();
		} catch(PersistenceMechanismException e){
            throw new RepositoryException(e);
        } catch (SQLException e) {
			throw new RepositoryException(e);
		} finally {
			try {
				pm.releaseCommunicationChannel();
			} catch (PersistenceMechanismException ex) {
				throw new RepositoryException(ex);
			}
		}
		return list;
	}

	@Override
	public void update({{data.option.entity}} {{data.option.entity|lower}}) throws {{data.option.entity}}NotFoundException,
			RepositoryException {
		try {
    	    Statement statement = (Statement) pm.getCommunicationChannel();

    	    statement.executeUpdate("UPDATE {{data.option.entity}} SET
	{% if data.option.properties|length > 0 %}{% for property in data.option.properties %}
	{% if loop.first %}
	    {{property.name}} = '"+ activity.get{{property.name|capitalize}}() +
	{% else %}
	     "', {{property.name}} = '"+ activity.get{{property.name|capitalize}}() +
	{% endif %}
	{% endfor %}{% endif %}
	{% if data.option.categories|length > 0 %}
	    "', type{{data.option.entity}} = '"+ {{data.option.entity|lower}}.getType{{data.option.entity}}() +
	{% endif %}
	     "' WHERE id{{data.option.entity}} = '"+ {{data.option.entity|lower}}.getId{{data.option.entity}}()+"'");

		} catch(PersistenceMechanismException e){
            throw new RepositoryException(e);
		} catch (SQLException e) {
		    throw new RepositoryException(e);
	    } finally {
	    	try {
				pm.releaseCommunicationChannel();
			} catch (PersistenceMechanismException ex) {
				throw new RepositoryException(ex);
			}
		}
		
	}

	@Override
	public boolean isThere({{data.option.entity}} {{data.option.entity|lower}}) throws RepositoryException {
		boolean answer = false;
        try {
            Statement statement = (Statement) pm.getCommunicationChannel();
            ResultSet resultset = statement.executeQuery("SELECT * FROM {{data.option.entity}} WHERE id{{data.option.entity}} = '" + {{data.option.entity|lower}}.getId{{data.option.entity}}() +"'");
            answer = resultset.next();
			resultset.close();
		} catch(PersistenceMechanismException e){
            throw new RepositoryException(e);
        } catch (SQLException e) {
			throw new RepositoryException(e);
		} finally {
			try {
				pm.releaseCommunicationChannel();
			} catch (PersistenceMechanismException ex) {
				throw new RepositoryException(ex);
			}
		}
        return answer;
	}

}
//#endif