// Autogenerated by EvDSL

package {{systemName|lower}}.ev.util.LibraryOfDSL;
import {{systemName|lower}}.ev.util.LibraryOfDSL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import {{systemName|lower}}.ev.data.{{data.option.entity}};
import {{systemName|lower}}.ev.exception.{{data.option.entity}}Exception;
import {{systemName|lower}}.ev.exception.RepositoryException;
import {{systemName|lower}}.ev.util.PersistenceMechanismException;
import {{systemName|lower}}.ev.util.PersistenceMechanismRDBMS;
{% if data.option.categories|length > 0 %}
import {{systemName|lower}}.ev.data.{{data.option.entity}}.Type{{data.option.entity}};
{% endif %}

public class {{data.option.entity}}BDR implements {{data.option.entity}}{

	
	private static {{data.option.entity}}BDR instance;
	private PersistenceMechanismRDBMS pm;
	
	public {{data.option.entity}}BDR(){
		try{
			pm = PersistenceMechanismRDBMS.getInstance();
			pm.connect();
		}catch(Exception ex){
			ex.printStackTrace();
		}
	}
	
	public synchronized static {{data.option.entity}}BDR getInstance(){
		if(instance == null){
			instance = new {{data.option.entity}}BDR();
		}
		return instance;
	}
	
	@Override
	public void insert({{data.option.entity}} {{data.option.entity|lower}}) throws RepositoryException{
		try {
			Statement statement = (Statement) pm.getCommunicationChannel();
			statement.executeUpdate("INSERT INTO {{data.option.entity}} ({% if data.option.properties|length > 0 %}{% for property in data.option.properties %}{% if loop.first %}{{property.name}}{% else %},{{property.name}}{% endif %}{% endfor %}{% endif %}{% if data.option.categories|length > 0 %},type{{data.option.entity}}{% endif %}) Values('"
					{% if data.option.properties|length > 0 %}{% for property in data.option.properties %}{% if loop.first %}{{data.option.entity|lower}}.get{{property.name|capitalize}}(){% else %}+"','"+ {{data.option.entity|lower}}.get{{property.name|capitalize}}(){% endif %}{% endfor %}{% endif %}{% if data.option.categories|length > 0 %}+"','"+{{data.option.entity|lower}}.getType{{data.option.entity}}(){% endif %}+"')");
		
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (PersistenceMechanismException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}finally{
			try {
				pm.releaseCommunicationChannel();
			} catch (PersistenceMechanismException ex) {
				throw new RepositoryException(ex);
			}
		}
		
	}

	@Override
	public void remove({{data.option.entity}} {{data.option.entity}}) throws {{data.option.entity}}NotFoundException,
			RepositoryException {
		try{
            Statement statement = (Statement) pm.getCommunicationChannel();
		    int i = statement.executeUpdate("DELETE FROM {{data.option.entity}} WHERE id{{data.option.entity}} = '"+ {{data.option.entity}}.getIdEntity() +"'AND idUser ='"+{{data.option.entity}}.getIdOrganizer()+"'");
            if (i == 0) {
            	throw new {{data.option.entity}}NotFoundException({{data.option.entity}}.getIdEntity());
            }
		} catch(PersistenceMechanismException e){
            throw new RepositoryException(e);
		} catch(SQLException e){
            throw new RepositoryException(e);            
		} finally {
			try {
				pm.releaseCommunicationChannel();
			} catch (PersistenceMechanismException ex) {
				throw new RepositoryException(ex);
			}
		}
		
	}

	@Override
	public {{data.option.entity}} search(int idEntity) throws {{data.option.entity}}NotFoundException,
			RepositoryException {
		{{data.option.entity}} {{data.option.entity}} = null;
		{{data.option.entity}} = new {{data.option.entity}}();
        try {
            Statement statement = (Statement) pm.getCommunicationChannel();
            ResultSet resultset = statement.executeQuery("Select * from {{data.option.entity}} WHERE idEntity =" + idEntity);
            if (resultset.next()) { 
            	
            	{{data.option.entity}}.setIdEntity(resultset.getInt("idEntity"));
            	{{data.option.entity}}.setIdOrganizer(resultset.getInt("idUser"));
            	
            } else {
            	throw new {{data.option.entity}}NotFoundException(idEntity);
            }
			resultset.close();
		} catch(PersistenceMechanismException e){
            throw new RepositoryException(e);
        } catch (SQLException e) {
			throw new RepositoryException(e);
		} finally {
			try {
				pm.releaseCommunicationChannel();
			} catch (PersistenceMechanismException ex) {
				throw new RepositoryException(ex);
			}
		}
		return {{data.option.entity}};
	}

	@Override
	public void update({{data.option.entity}} {{data.option.entity}}) throws {{data.option.entity}}NotFoundException,
			RepositoryException {
		try {
    	    Statement statement = (Statement) pm.getCommunicationChannel();

    	    statement.executeUpdate("UPDATE {{data.option.entity}} SET id{{data.option.entity}} = '"+ {{data.option.entity}}.getIdEntity() +
    	    		                                 "', idUser = '" + {{data.option.entity}}.getIdOrganizer() +"'");

		} catch(PersistenceMechanismException e){
            throw new RepositoryException(e);
		} catch (SQLException e) {
		    throw new RepositoryException(e);
	    } finally {
	    	try {
				pm.releaseCommunicationChannel();
			} catch (PersistenceMechanismException ex) {
				throw new RepositoryException(ex);
			}
		}
		
	}

	@Override
	public boolean isThere({{data.option.entity}} {{data.option.entity}}) throws RepositoryException {
		boolean answer = false;
        try {
            Statement statement = (Statement) pm.getCommunicationChannel();
            ResultSet resultset = statement.executeQuery("SELECT * FROM {{data.option.entity}} WHERE idEntity = '" + {{data.option.entity}}.getIdEntity() + "'AND idUser='" + {{data.option.entity}}.getIdOrganizer() +"'");
            //ResultSet resultset = statement.executeQuery("select * from {{data.option.entity}} where idEntity = 1 AND idUser = 2;");
            answer = resultset.next();
			resultset.close();
		} catch(PersistenceMechanismException e){
            throw new RepositoryException(e);
        } catch (SQLException e) {
			throw new RepositoryException(e);
		} finally {
			try {
				pm.releaseCommunicationChannel();
			} catch (PersistenceMechanismException ex) {
				throw new RepositoryException(ex);
			}
		}
        return answer;
	}

}
//#endif