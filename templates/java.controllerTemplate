
package {{systemName|lower}}.ev.business;

import java.io.IOException;
import java.util.List;
import java.util.Set;

import {{systemName|lower}}.ev.util.LibraryOfDSL;
import {{systemName|lower}}.ev.data.{{data.option.entity}};
import {{systemName|lower}}.ev.exception.{{data.option.entity}}AlreadyInsertedException;
import {{systemName|lower}}.ev.exception.{{data.option.entity}}NotFoundException;
import {{systemName|lower}}.ev.exception.RepositoryException;
import {{systemName|lower}}.ev.repository.{{data.option.entity}}Repository;

public class {{data.option.entity}}Control {
  
  private {{data.option.entity}}Repository {{data.option.entity|lower}}List;
  
  public {{data.option.entity}}Control({{data.option.entity}}Repository repository){
    this.{{data.option.entity|lower}}List = repository;
  }
  public void insert({{data.option.entity}} {{data.option.entity|lower}}) throws {{data.option.entity}}AlreadyInsertedException, RepositoryException{
    if ({{data.option.entity|lower}} != null) {
            if (!{{data.option.entity|lower}}List.isThere({{data.option.entity|lower}}.getId{{data.option.entity}}())) {
                {{data.option.entity|lower}}List.insert({{data.option.entity|lower}});
            } else {
                throw new {{data.option.entity}}AlreadyInsertedException({{data.option.entity|lower}}.getId{{data.option.entity}}());
            }
        } else {
            throw new IllegalArgumentException();
        }
  }

  {% if 'Remove' in data.commands %}
  public void remove(int id{{data.option.entity}}) throws {{data.option.entity}}AlreadyInsertedException, RepositoryException, {{data.option.entity}}NotFoundException{
    {{data.option.entity|lower}}List.remove(id{{data.option.entity}});
  }
  {% endif %}
  {% if 'Update' in data.commands %}
  public void update({{data.option.entity}} {{data.option.entity}}) throws {{data.option.entity}}AlreadyInsertedException, RepositoryException, {{data.option.entity}}NotFoundException{
  {{data.option.entity|lower}}List.update({{data.option.entity}});
  }
  {% endif %}
  {% if 'Search' in data.commands %}
  public {{data.option.entity}} search(int id{{data.option.entity}}) throws {{data.option.entity}}AlreadyInsertedException, RepositoryException, {{data.option.entity}}NotFoundException{
    return {{data.option.entity|lower}}List.search(id{{data.option.entity}});
  }
  {% endif %}
  
  public boolean isThere(int id{{data.option.entity}}) throws RepositoryException {
    return {{data.option.entity|lower}}List.isThere(id{{data.option.entity}});
  }

  public int get{{data.option.entity}}LastId() throws RepositoryException{
    return {{data.option.entity|lower}}List.get{{data.option.entity}}LastId();
  }
  
  {% if 'ListAll' in data.commands %}
  public List<{{data.option.entity}}> get{{data.option.entity}}List() throws RepositoryException {
    return {{data.option.entity|lower}}List.get{{data.option.entity}}List();  
  } 
  {% endif %}
 }