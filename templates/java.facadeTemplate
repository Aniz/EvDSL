package rise.splcc.facade;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Set;

import org.apache.commons.mail.EmailException;
import rise.splcc.util.Email;

{% for entity in entities %}
import rise.splcc.business.{{entity.name}}Control;
import rise.splcc.exception.{{entity.name}}Exception;
import rise.splcc.repository.{{entity.name}}Repository;
import rise.splcc.repository.{{entity.name}}RepositoryBDR;

{% endfor %}
import com.lowagie.text.DocumentException;


public class RiSEventFacade {

	private EventControl eventList;
	private UserControl userList;

	{% for entity in entities %}
	private {{entity.name}}Control {{entity.name|lower}}List;
	{% endfor %}

	protected static RiSEventFacade instance;
	
	public RiSEventFacade(){
		EventRepository eventRepository = EventRepositoryBDR.getInstance();
		UserRepository userRepository = UserRepositoryBDR.getInstance();
		
		{% for entity in entities %}
		{{entity.name}}Repository {{entity.name|lower}}Repository = {{entity.name}}RepositoryBDR.getInstance();
		{% endfor %}
		
		eventControlList = new EventControl(eventRepository);		
		userControlList = new UserControl(userRepository);
	
		{% for entity in entities %}
		{{entity.name|lower}}List = new {{entity.name}}Control({{entity.name|lower}}Repository); 
		{% endfor %}	
	}
	
	public static RiSEventFacade getInstance()  {
		if (RiSEventFacade.instance == null) {
			RiSEventFacade.instance = new RiSEventFacade();
		}
		return RiSEventFacade.instance;
	}
	
	{% for entity in entities %}
	public void insert{{entity.name}}({{entity.name}} entity) throws {{entity.name}}Exception, RepositoryException{
		this.{{entity.name|lower}}List.insert(entity);
	}
	public void remove{{entity.name}}(int idEntity) throws {{entity.name}}Exception, RepositoryException, {{entity.name}}Exception{
		{{entity.name|lower}}List.remove(idEntity);  
	}
	
	public void update{{entity.name}}({{entity.name}} Entity) throws {{entity.name}}Exception, Exception, {{entity.name}}Exception{
		{{entity.name|lower}}List.update({{entity.name}});
	}
	
	public List<{{entity.name}}> get{{entity.name}}() throws RepositoryException{
		return {{entity.name}}s.get{{entity.name}}();
	}
	
	public {{entity.name}} search{{entity.name}}(int idEntity) throws {{entity.name}}Exception, RepositoryException, {{entity.name}}Exception{
		return {{entity.name|lower}}List.search(idEntity);
	}
	
	public int get{{entity.name}}LastId() throws RepositoryException{
		return {{entity.name|lower}}List.get{{entity.name}}LastId();
	}
	
	public int get{{entity.name}}IdByName(String entityName) throws RepositoryException{
		return {{entity.name|lower}}List.get{{entity.name}}IdByName(entityName);
	}

	public boolean isThere{{entity.name}}(int idEntity) throws RepositoryException{
		return {{entity.name|lower}}List.isThere(idEntity);
	}
	{% endfor %}
	
	//#if ${ReportsFrequencyperEvent} == "T"
	public List<String> getParticipantsPerEvent(int idEvent) throws RepositoryException{
		return events.getParticipantsPerEvent(idEvent);
	}
	//#endif
	//#if ${EventProgram} == "T"
	public void generateProgram (List<Activity> activities, Event event) throws DocumentException, IOException{
		events.generateProgram(activities, event);
	}
	//#endif
	
	//#if ${EventImportantDates} == "T"
	public void generateImportantDates(String abstractDate, String fullPaperDate, String notificationDate, Event event) throws DocumentException, IOException{
		events.generateImportantDates(abstractDate, fullPaperDate, notificationDate, event);
	}
	//#endif
	//#if ${ReportsFrequencyperEvent} == "T"
	public void frequencyPerEvent(List<String> ParticipantsPerEvent, Event event) throws DocumentException, IOException{
		events.frequencyPerEvent(ParticipantsPerEvent, event);
	}
	//#endif
	
	//#if ${Bugs} == "T"
	public String sendBug(String nome, String assunto, String mensagem, Email email) throws EmailException {
		return users.sendBug(nome, assunto, mensagem, email);
	}
	//#endif
	
	//#endif
	//REVIEWER
	public Reviewer getReviewerByknowledgeArea(String knowledgearea) throws ReviewerNotFoundException, RepositoryException, ReviewerAlreadyInsertedException{
		return reviewers.getReviewerByknowledgeArea(knowledgearea);
	}
	//#endif
	
	//ACTIVITY
	public List<Activity> getActivitiesByEvent(int idEvent) throws RepositoryException{
		return activities.getActivitiesByEvent(idEvent);
	}
	
	public float getEventMainTrackValue(int idEvent) throws RepositoryException{
		return activities.getEventMainTrackValue(idEvent);
	}
	
	public int getActivityMainTrackId(int idEvent) throws RepositoryException{
		return activities.getActivityMainTrackId(idEvent);
	}
	
	public int getEventbyActivity(int idActivity) throws RepositoryException{
		return activities.getEventbyActivity(idActivity);
	}
	
	//#if ${ReportsFrequencyperActivity} == "T"
	public void frequencyPerActivity(List<String> ParticipantsPerActivity, Activity activity, String eventName) throws DocumentException, IOException{
		activities.frequencyPerActivity(ParticipantsPerActivity, activity, eventName);
	}
	//#endif
	
	//#if ${ReportsListofAuthors} == "T"
	public List<String> getListOfAuthorsPerActivity(int idActivity) throws RepositoryException{
		return activities.getListOfAuthorsPerActivity(idActivity);
	}
	
	public void listOfAuthorsPerActivity(Set<String> authorsPerActivity, Activity activity) throws DocumentException, IOException{
		activity.listOfAuthorsPerActivity(authorsPerActivity);
	}
	//#endif
	//#endif
	
	public void removeValue(float value, int idRegistration) throws RepositoryException{
		registrations.removeValue(value, idRegistration);
	}
	
	public void addValue(float value, int idRegistration) throws RepositoryException{
		registrations.addValue(value, idRegistration);
	}
	
	public void typePayment(Payment payment, Payment paymentout) throws DocumentException, IOException {
		this.payments.type(payment, paymentout);
	}
	//#endif
	
	public void emailRoundNotification (Review review, User user, Email email) throws EmailException{
		reviews.emailRoundNotification(review, user, email);
	}
	
	public List<String> getReviewsBySubmission(int idSubmission) throws RepositoryException{
		return reviews.getReviewsBySubmission(idSubmission);
	}
	
	//#if ${SubmissionCompleta} == "T"
	public void insertAttachment(File attachment, int idActivity) throws RepositoryException, SubmissionAlreadyInsertedException{
		this.submissions.inserAttachmanet(attachment, idActivity);
	}
	//#endif
	public void pdfRecovey(int idSubmission) throws RepositoryException{
		this.submissions.pdfRecover(idSubmission);
	}
	
	public List<Submission> getSubmissionsByUser(int idUser) throws RepositoryException{
		return submissions.getSubmissionsByUser(idUser);
	}
	
	//#if ${CheckingCopyAtestado} == "T"
	public void emitirAtestado (String nome, String evento, String periodo, CheckingCopy checkingcopy) throws RepositoryException {
		checkingCopys.emitirAtestado(nome, evento, periodo, checkingcopy);
	}
	//#endif
	
	//#if ${CheckingCopyCertificado} == "T"
	public void emitirCertificado (String nome, String evento, String periodo, String atividade, CheckingCopy checkingcopy) throws RepositoryException, DocumentException, IOException {
		checkingCopys.emitirCertificado(nome, evento, periodo, atividade, checkingcopy);
	}
	//#endif
	//#endif
	
	//#if ${NotificationsDeadline} == "T" or ${NotificationsPaperAssignemnt} == "T" or ${NotificationsAceptanceRejection} == "T"
	public void emailNotification (User user, Review review, Email email) throws EmailException{
		assignments.emailNotification(user, review, email);
	}
	//#endif
	
}
