package {{systemName|lower}}.ev.facade;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Set;

import org.apache.commons.mail.EmailException;
import {{systemName|lower}}.ev.util.Email;
import {{systemName|lower}}.ev.data.Review;
{% for key,value in data.items() %}
import {{systemName|lower}}.ev.business.{{key}}Control;
import {{systemName|lower}}.ev.exception.{{key}}AlreadyInsertedException;
import {{systemName|lower}}.ev.exception.{{key}}NotFoundException;
import {{systemName|lower}}.ev.exception.{{key}}Exception;
import {{systemName|lower}}.ev.repository.{{key}}Repository;
import {{systemName|lower}}.ev.repository.{{key}}RepositoryBDR;
{% endfor %}
import com.lowagie.text.DocumentException;


public class {{systemName}}Facade {

{% for key,value in data.items() %}
	private {{key}}Control {{key|lower}}List;
{% endfor %}

	protected static {{systemName}}Facade instance;
	
	public {{systemName}}Facade(){
	{% for key,value in data.items() %}
		{{key}}Repository {{key|lower}}Repository = {{key}}RepositoryBDR.getInstance();
	{% endfor %}
		
	{% for key,value in data.items() %}
		{{key|lower}}List = new {{key}}Control({{key|lower}}Repository); 
	{% endfor %}	
	}
	
	public static {{systemName}}Facade getInstance()  {
		if ({{systemName}}Facade.instance == null) {
			{{systemName}}Facade.instance = new {{systemName}}Facade();
		}
		return {{systemName}}Facade.instance;
	}
	
{% for key,value in data.items() %}
	{% if 'Insert' in value.commands %}
	public void insert{{key}}({{key}} entity) throws {{key}}AlreadyInsertedException, RepositoryException{
		this.{{key|lower}}List.insert(entity);
	}
	{% endif %}
	{% if 'Remove' in value.commands %}
	public void remove{{key}}(int idEntity) throws {{key}}NotFoundException, RepositoryException, {{key}}AlreadyInsertedException{
		{{key|lower}}List.remove(idEntity);  
	}
	{% endif %}
	{% if 'Update' in value.commands %}
	public void update{{key}}({{key}} Entity) throws {{key}}NotFoundException, Exception, {{key}}AlreadyInsertedException{
		{{key|lower}}List.update(Entity);
	}
	{% endif %}
	public List<{{key}}> get{{key}}() throws RepositoryException{
		return {{key}}s.get{{key}}();
	}
	{% if 'Search' in value.commands %}
	public {{key}} search{{key}}(int idEntity) throws {{key}}NotFoundException, RepositoryException, {{key}}AlreadyInsertedException{
		return {{key|lower}}List.search(idEntity);
	}
	{% endif %}
	public int get{{key}}LastId() throws RepositoryException{
		return {{key|lower}}List.get{{key}}LastId();
	}
	public int get{{key}}IdByName(String entityName) throws RepositoryException{
		return {{key|lower}}List.get{{key}}IdByName(entityName);
	}
	public boolean isThere{{key}}(int idEntity) throws RepositoryException{
		return {{key|lower}}List.isThere(idEntity);
	}
{% endfor %}
{% if 'Event' in data %}
	{% if 'eventProgram' in data.User.option.statments %}
	public void generateProgram (List<Activity> activities, Event event) throws DocumentException, IOException{
		events.generateProgram(activities, event);
	}
	{% endif %}
	{% if 'eventImportantDates' in data.User.option.statments %}
	public void generateImportantDates(String abstractDate, String fullPaperDate, String notificationDate, Event event) throws DocumentException, IOException{
		events.generateImportantDates(abstractDate, fullPaperDate, notificationDate, event);
	}
	{% endif %}
	{% if 'reportsFrequencyperEvent' in data.User.option.statments %}	
	public List<String> getParticipantsPerEvent(int idEvent) throws RepositoryException{
		return events.getParticipantsPerEvent(idEvent);
	}
	public void frequencyPerEvent(List<String> ParticipantsPerEvent, Event event) throws DocumentException, IOException{
		events.frequencyPerEvent(ParticipantsPerEvent, event);
	}
	{% endif %}	
{% endif %}	
{% if 'User' in data %}
	{% if 'sendBugTrackEmail' in data.User.option.statments %}
	public String sendBug(String nome, String assunto, String mensagem, Email email) throws EmailException {
		return users.sendBug(nome, assunto, mensagem, email);
	}
	{% endif %}	
{% endif %}	
{% if 'Activity' in data %}
	//ACTIVITY
	public List<Activity> getActivitiesByEvent(int idEvent) throws RepositoryException{
		return activities.getActivitiesByEvent(idEvent);
	}
	
	public float getEventMainTrackValue(int idEvent) throws RepositoryException{
		return activities.getEventMainTrackValue(idEvent);
	}
	
	public int getActivityMainTrackId(int idEvent) throws RepositoryException{
		return activities.getActivityMainTrackId(idEvent);
	}
	
	public int getEventbyActivity(int idActivity) throws RepositoryException{
		return activities.getEventbyActivity(idActivity);
	}
	
	{% if 'reportsListofAuthors' in data.Activity.option.statments %}
	public void frequencyPerActivity(List<String> ParticipantsPerActivity, Activity activity, String eventName) throws DocumentException, IOException{
		activities.frequencyPerActivity(ParticipantsPerActivity, activity, eventName);
	}
	{% endif %}

	{% if 'reportsListofAuthors' in data.Activity.option.statments %}
	public List<String> getListOfAuthorsPerActivity(int idActivity) throws RepositoryException{
		return activities.getListOfAuthorsPerActivity(idActivity);
	}
	
	public void listOfAuthorsPerActivity(Set<String> authorsPerActivity, Activity activity) throws DocumentException, IOException{
		activity.listOfAuthorsPerActivity(authorsPerActivity);
	}
	{% endif %}
	public List<Activity> getActivities() throws RepositoryException{
		return activities.getActivities();
	}
{% endif %}
{% if 'Payment' in data %}	
	public void removeValue(float value, int idRegistration) throws RepositoryException{
		registrations.removeValue(value, idRegistration);
	}
	public void addValue(float value, int idRegistration) throws RepositoryException{
		registrations.addValue(value, idRegistration);
	}
	public void typePayment(Payment payment, Payment paymentout) throws DocumentException, IOException {
		this.payments.type(payment, paymentout);
	}
{% endif %}	
{% if 'Submission' in data %}	
	{% if 'insertAttachment' in data.Submission.option.statments %}
	public void insertAttachment(File attachment, int idActivity) throws RepositoryException, SubmissionAlreadyInsertedException{
		this.submissions.inserAttachmanet(attachment, idActivity);
	}
	{% endif %}
	public void pdfRecovey(int idSubmission) throws RepositoryException{
		this.submissions.pdfRecover(idSubmission);
	}
	public List<Submission> getSubmissionsByUser(int idUser) throws RepositoryException{
		return submissions.getSubmissionsByUser(idUser);
	}
{% endif %}
{% if 'CheckingCopy' in data %}
	{% if 'checkingCopyAtestado' in data.Reviewer.option.statments %}
	public void emitirAtestado (String nome, String evento, String periodo, CheckingCopy checkingcopy) throws RepositoryException {
		checkingCopys.emitirAtestado(nome, evento, periodo, checkingcopy);
	}
	{% endif %}
	{% if 'checkingCopyCertificado' in data.Reviewer.option.statments %}
	public void emitirCertificado (String nome, String evento, String periodo, String atividade, CheckingCopy checkingcopy) throws RepositoryException, DocumentException, IOException {
		checkingCopys.emitirCertificado(nome, evento, periodo, atividade, checkingcopy);
	}
	{% endif %}
{% endif %}
{% if 'Reviewer' in data %}	
	
	//if Reviewer and Submission -> Review is enable 
	//Review Feature
	{% if 'Submission' in data %}			
	public void emailRoundNotification (Review review, User user, Email email) throws EmailException{
		reviews.emailRoundNotification(review, user, email);
	}
	public List<String> getReviewsBySubmission(int idSubmission) throws RepositoryException{
		return reviews.getReviewsBySubmission(idSubmission);
	}
	{% endif %}

	public Reviewer getReviewerByknowledgeArea(String knowledgearea) throws ReviewerNotFoundException, RepositoryException, ReviewerAlreadyInsertedException{
		return reviewers.getReviewerByknowledgeArea(knowledgearea);
	}

	{% if 'notificationsDeadline' in data.Reviewer.option.statments or 'notificationsPaperAssignemnt' in data.Reviewer.option.statments or 'notificationsAceptanceRejection' in data.Reviewer.option.statments%}
	public void emailNotification (User user, Review review, Email email) throws EmailException{
		assignments.emailNotification(user, review, email);
	}
	{% endif %}
{% endif %}
	
}
