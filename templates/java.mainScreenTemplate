// Autogenerated by EvDSL
package {{systemName|lower}}.ev.ui2;
import {{systemName|lower}}.ev.util.LibraryOfDSL;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyVetoException;

import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.WindowConstants;
import javax.swing.border.EmptyBorder;

import org.apache.commons.mail.EmailAttachment;
import org.apache.commons.mail.EmailException;
import org.apache.commons.mail.HtmlEmail;
import org.apache.commons.mail.SimpleEmail;

import {{systemName|lower}}.ev.facade.{{systemName}}Facade;

public class {{systemName}}MainScreenP extends JFrame {

	private JPanel contentPane;
	
    public static {{systemName}}Facade facade; // caso a variabilidade de tela login seja retirada o sistema deve iniciar dessa tela
	
	private static {{systemName}}MainScreenP instance{{systemName}}MainScreenP;      
	
{% for key,value in data.items() %}
	{% if value.commands %}
		{% for command in value.commands %}
	private {{key}}{{command}}ScreenP screen{{command}}{{key}};	
		{% endfor %}
	{% endif %}
	{% if value.statments %}
		{% for actionKey,statment in value.statments.items() %}
			{% if  statment.condition == 'def' %}
	 			{% if  actionKey in ["reportsFrequencyPerEvent","reportsFrequencyPerActivity","reportsListOfAuthors"] %}
    	private {{key}}{{actionKey|upperfirst}}ScreenP screen{{key}}{{actionKey|upperfirst}};	
    			{% else %}                   
		private {{actionKey|upperfirst}}ScreenP screen{{actionKey|upperfirst}};	
				{% endif %}
			{% endif %}
		{% endfor %}
	{% endif %}

{% endfor %}
{% for dep in dependences %}
	{% if dep in ["ActivityUser","ActivitySpeaker","ActivityOrganizer"] %}               
	private {{dep}}ManagementScreenP screenManagement{{dep}};
	{% endif %}

	{% if dep == "Submission" %}
	private SubmissionSearchScreenP screenSearchSubmission;
	private SubmissionListAllScreenP screenListAllSubmission;
	private SubmissionRemoveScreenP screenRemoveSubmission;
	private SubmissionCompleteInsertScreenP screenInsertSubmission;
	private SubmissionPartialInsertScreenP screenInsertSubmissionPartial;
	{% endif %}
	
	{% if dep == "Review" %}
	private ReviewInsertScreenP screenInsertReview;
	private ReviewRemoveScreenP screenRemoveReview;
	private ReviewUpdateScreenP screenUpdateReview;
	private ReviewSearchScreenP screenSearchReview;
	private ReviewListAllScreenP screenListAllReview;
	private ReviewManagementScreenP screenManagementReview;
	// private ReviewResultsScreenP screenResultsReview;
	{% endif %}

	{% if dep == "Registration" %}
	private RegistrationInsertScreenP screenInsertRegistration;
	private RegistrationSearchScreenP screenSearchRegistration;
	private RegistrationListAllScreenP screenListAllRegistration;
	private RegistrationManagementScreenP screenManagementRegistration;
	private RegistrationUpdateScreenP screenUpdateRegistration;
	private RegistrationRemoveScreenP screenRemoveRegistration;
	{% endif %}
{% endfor %}
	
	private static JLabel labelImagem;
	
	private JDesktopPane desktopPane;
	
	
	public static {{systemName}}Facade getFacade(){
		return {{systemName}}Facade.getInstance();
	}
	
	public static {{systemName}}MainScreenP getInstance{{systemName}}MainScreenP() {
		if (instance{{systemName}}MainScreenP == null) {
			{{systemName}}MainScreenP.instance{{systemName}}MainScreenP = new {{systemName}}MainScreenP();
		}
		return {{systemName}}MainScreenP.instance{{systemName}}MainScreenP;
	}

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					{{systemName}}MainScreenP frame = new {{systemName}}MainScreenP();
					frame.setVisible(true);
					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public {{systemName}}MainScreenP() {
		
		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		
		ExitMenuAction exitMenuAction = new ExitMenuAction();
		
{% for key,value in data.items() %}
	{% if value.commands %}
		{% for command in value.commands %}
		{{command}}{{key}}MenuAction {{command|lower}}{{key}}Action = new {{command}}{{key}}MenuAction();	
		{% endfor %}
	{% endif %}
	{% if value.statments %}
		{% for actionKey,statment in value.statments.items() %}
			{% if  statment.condition == 'def' %}
	 			{% if  actionKey in ["reportsFrequencyPerEvent","reportsFrequencyPerActivity","reportsListOfAuthors"] %}
    	{{key}}{{actionKey|upperfirst}}MenuAction {{key|lower}}{{actionKey|upperfirst}}Action = new {{key}}{{actionKey|upperfirst}}MenuAction();	
				{% else %}                   
		{{actionKey|upperfirst}}MenuAction {{actionKey}}Action = new {{actionKey|upperfirst}}MenuAction();	
				{% endif %}
			{% endif %}
		{% endfor %}
	{% endif %}

{% endfor %}

		{% if 'userSendBugTrackEmail' in data.statments %}
		BugtrackScreenMenuAction bugtrackAction = new BugtrackScreenMenuAction();
		{% endif %}
		{{systemName}}MainScreenP.facade = {{systemName}}Facade.getInstance();
		
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 1120, 691);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		desktopPane = new JDesktopPane();
		desktopPane.setBackground(Color.LIGHT_GRAY);
		desktopPane.setBounds(6, 36, 1104, 624);
		contentPane.add(desktopPane);
		
		labelImagem = new JLabel("");
		labelImagem.setBounds(210, 164, 648, 193);
		ImageIcon image = new ImageIcon(getClass().getResource("/images/riseLabs.png"));
		Image imag = image.getImage().getScaledInstance(labelImagem.getWidth(), labelImagem.getHeight(), Image.SCALE_SMOOTH);
		labelImagem.setIcon(new ImageIcon(imag));
		desktopPane.add(labelImagem);
		
		JMenuBar menuBar = new JMenuBar();
		menuBar.setBounds(32, 12, 1078, 22);
		contentPane.add(menuBar);
		
		JMenu mnArchieve = new JMenu("Archieve");
		menuBar.add(mnArchieve);
		
		{% if "Registration" in dependences %}    
		JMenu mnRegistration = new JMenu("Registration");
		menuBar.add(mnRegistration);

		InsertRegistrationMenuAction insertRegistrationAction = new InsertRegistrationMenuAction();
		RemoveRegistrationMenuAction removeRegistrationAction = new RemoveRegistrationMenuAction();
		UpdateRegistrationMenuAction updateRegistrationAction = new UpdateRegistrationMenuAction();
		SearchRegistrationMenuAction searchRegistrationAction = new SearchRegistrationMenuAction();
		ListAllRegistrationMenuAction listAllRegistrationAction = new ListAllRegistrationMenuAction();
		ManagementRegistrationMenuAction managementRegistrationAction = new ManagementRegistrationMenuAction();
	
		JMenuItem mntmInsert_10 = new JMenuItem("Insert");
		mnRegistration.add(mntmInsert_10);
		JMenuItem mntmRemove_10 = new JMenuItem("Remove");
		mnRegistration.add(mntmRemove_10);
		JMenuItem mntmUpdate_10 = new JMenuItem("Update");
		mnRegistration.add(mntmUpdate_10);
		JMenuItem mntmSearch_10 = new JMenuItem("Search");
		mnRegistration.add(mntmSearch_10);
		JMenuItem mntmListall_10 = new JMenuItem("ListAll");
		mnRegistration.add(mntmListall_10);
		JMenuItem mntmRegistrationManagement = new JMenuItem("Registration Management");
		mnRegistration.add(mntmRegistrationManagement);
		
		mntmInsert_10.addActionListener(insertRegistrationAction);
		mntmRemove_10.addActionListener(removeRegistrationAction);
		mntmUpdate_10.addActionListener(updateRegistrationAction);
		mntmSearch_10.addActionListener(searchRegistrationAction);
		mntmListall_10.addActionListener(listAllRegistrationAction);
		mntmRegistrationManagement.addActionListener(managementRegistrationAction);
		
		{% if "User" in data %}    
		ActivityUserManagementMenuAction managementActivityUserAction = new ActivityUserManagementMenuAction();
		JMenuItem mntmUserActivity = new JMenuItem("User -> Activity");
		mnRegistration.add(mntmUserActivity);
		mntmUserActivity.addActionListener(managementActivityUserAction);
		{% endif %}
	
		{% if "Speaker" in data %}               
		ActivitySpeakerManagementMenuAction managementActivitySpeakerAction = new ActivitySpeakerManagementMenuAction();
		JMenuItem mntmSpeakerActivity = new JMenuItem("Speaker -> Activity");
		mnRegistration.add(mntmSpeakerActivity);
		mntmSpeakerActivity.addActionListener(managementActivitySpeakerAction);
		{% endif %}
	
		{% if "Organizer" in data %}               
		ActivityOrganizerManagementMenuAction managementActivityOrganizerAction = new ActivityOrganizerManagementMenuAction();
		JMenuItem mntmOrganizerActivity = new JMenuItem("Organizer -> Activity");
		mnRegistration.add(mntmOrganizerActivity);	
		mntmOrganizerActivity.addActionListener(managementActivityOrganizerAction);
		{% endif %}
		{% endif %}
		// mntmFrequencyPerActivity.addActionListener(frequencyPerActivityAction);
		// mntmFrequencyPerEvent.addActionListener(frequencyPerEventAction);
		// mntmListOfAuthors.addActionListener(listOfAuthorsPerActivityAction);
		//#if ${Bugs} == "T"		
		// JMenuItem mntmBugtrack = new JMenuItem("Bugtrack");
		// mnArchieve.add(mntmBugtrack);
		//#endif
		
		JMenuItem mntmExit = new JMenuItem("Exit");
		mnArchieve.add(mntmExit);

{% for key,value in data.items() %}
{% if key != "Author" %}
		JMenu mn{{key}} = new JMenu("{{key|splitName}}");
		menuBar.add(mn{{key}});
	{% for command in value.commands %}
		JMenuItem mntm{{command}}{{key}} = new JMenuItem("{{command}}");
		mn{{key}}.add(mntm{{command}}{{key}});
		mntm{{command}}{{key}}.addActionListener({{command|lower}}{{key}}Action);
	{% endfor %}
	{% if value.statments %}
	{% for actionKey,statment in value.statments.items() %}
		
			{% if  statment.condition == 'def' %}
	 			{% if  actionKey in ["reportsFrequencyPerEvent","reportsFrequencyPerActivity","reportsListOfAuthors"] %}
		JMenuItem mntm{{key}}{{actionKey|upperfirst}} = new JMenuItem("{{actionKey|splitName}}");
		mn{{key}}.add(mntm{{key}}{{actionKey|upperfirst}});
		mntm{{key}}{{actionKey|upperfirst}}.addActionListener({{key|lower}}{{actionKey|upperfirst}}Action);
    			{% else %}                   
		JMenuItem mntm{{actionKey|upperfirst}} = new JMenuItem("{{actionKey|splitName}}");
		mn{{key}}.add(mntm{{actionKey|upperfirst}});
		mntm{{actionKey|upperfirst}}.addActionListener({{actionKey}}Action);
				{% endif %}
			{% endif %}
	{% endfor %}
	{% endif %}
{% endif %}
{% endfor %}
		// JMenu mnReports = new JMenu("Reports");
		// menuBar.add(mnReports);
		
		mntmExit.addActionListener(exitMenuAction);
	{% if 'userSendBugTrackEmail' in data.statments %}
		// mntmBugtrack.addActionListener(bugtrackAction);
	{% endif %}
	}
	
	private class InsertRegistrationMenuAction  implements ActionListener{ 

					@Override
					public void actionPerformed(ActionEvent e) {

						screenInsertRegistration = RegistrationInsertScreenP.getInstanceRegistrationInsertScreenP();
						//desktopPane.add(screenInsertRegistration);
						if(screenInsertRegistration.getParent() == null){
							desktopPane.add(screenInsertRegistration);
						}
						screenInsertRegistration.setVisible(true);
						desktopPane.moveToFront(screenInsertRegistration);
						try {
							screenInsertRegistration.setSelected(true);
						} catch (PropertyVetoException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}

					}  
				}

				private class RemoveRegistrationMenuAction  implements ActionListener{ 

					@Override
					public void actionPerformed(ActionEvent e) {

						screenRemoveRegistration = RegistrationRemoveScreenP.getInstanceRegistrationRemoveScreenP();
						//desktopPane.add(screenRemoveRegistration);
						if(screenRemoveRegistration.getParent() == null){
							desktopPane.add(screenRemoveRegistration);
						}
						screenRemoveRegistration.setVisible(true);
						desktopPane.moveToFront(screenRemoveRegistration);
						try {
							screenRemoveRegistration.setSelected(true);
						} catch (PropertyVetoException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}

					}  
				}

				private class UpdateRegistrationMenuAction  implements ActionListener{ 

					@Override
					public void actionPerformed(ActionEvent e) {

						screenUpdateRegistration = RegistrationUpdateScreenP.getInstanceRegistrationUpdateScreenP();
						//desktopPane.add(screenUpdateRegistration);
						if(screenUpdateRegistration.getParent() == null){
							desktopPane.add(screenUpdateRegistration);
						}
						screenUpdateRegistration.setVisible(true);
						desktopPane.moveToFront(screenUpdateRegistration);
						try {
							screenUpdateRegistration.setSelected(true);
						} catch (PropertyVetoException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}  
				}

				private class SearchRegistrationMenuAction  implements ActionListener{ 

					@Override
					public void actionPerformed(ActionEvent e) {

						screenSearchRegistration = RegistrationSearchScreenP.getInstanceRegistrationSearchScreenP();
						//desktopPane.add(screenSearchRegistration);
						if(screenSearchRegistration.getParent() == null){
							desktopPane.add(screenSearchRegistration);
						}
						screenSearchRegistration.setVisible(true);
						desktopPane.moveToFront(screenSearchRegistration);
						try {
							screenSearchRegistration.setSelected(true);
						} catch (PropertyVetoException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}  
				}

				private class ListAllRegistrationMenuAction  implements ActionListener{ 

					@Override
					public void actionPerformed(ActionEvent e) {

						screenListAllRegistration = RegistrationListAllScreenP.getInstanceRegistrationListAllScreenP();
						//desktopPane.add(screenListAllRegistration);
						if(screenListAllRegistration.getParent() == null){
							desktopPane.add(screenListAllRegistration);
						}
						screenListAllRegistration.setVisible(true);
						desktopPane.moveToFront(screenListAllRegistration);
						try {
							screenListAllRegistration.setSelected(true);
						} catch (PropertyVetoException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}  
				}

				private class ManagementRegistrationMenuAction  implements ActionListener{ 

					@Override
					public void actionPerformed(ActionEvent e) {
						screenManagementRegistration = RegistrationManagementScreenP.getInstanceRegistrationManagementScreenP();
						//desktopPane.add(screenManagementRegistration);
						if(screenManagementRegistration.getParent() == null){
							desktopPane.add(screenManagementRegistration);
						}
						screenManagementRegistration.setVisible(true);
						desktopPane.moveToFront(screenManagementRegistration);
						try {
							screenManagementRegistration.setSelected(true);
						} catch (PropertyVetoException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}  
				}

		private class ActivityUserManagementMenuAction implements ActionListener{
			@Override
			public void actionPerformed(ActionEvent e) {
				screenManagementActivityUser = ActivityUserManagementScreenP.getInstanceActivityUserManagementScreenP();
				//desktopPane.add(screenManagementActivityUser);
				if(screenManagementActivityUser.getParent() == null){
					desktopPane.add(screenManagementActivityUser);
				}
				screenManagementActivityUser.setVisible(true);
				desktopPane.moveToFront(screenManagementActivityUser);
				try {
					screenManagementActivityUser.setSelected(true);
				} catch (PropertyVetoException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		}
		
		private class ActivitySpeakerManagementMenuAction implements ActionListener{
			@Override
			public void actionPerformed(ActionEvent e) {
				screenManagementActivitySpeaker = ActivitySpeakerManagementScreenP.getInstanceActivitySpeakerManagementScreenP();
				//desktopPane.add(screenManagementActivitySpeaker);
				if(screenManagementActivitySpeaker.getParent() == null){
					desktopPane.add(screenManagementActivitySpeaker);
				}
				screenManagementActivitySpeaker.setVisible(true);
				desktopPane.moveToFront(screenManagementActivitySpeaker);
				try {
					screenManagementActivitySpeaker.setSelected(true);
				} catch (PropertyVetoException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		}
		private class ActivityOrganizerManagementMenuAction implements ActionListener{
			@Override
			public void actionPerformed(ActionEvent e) {
				screenManagementActivityOrganizer = ActivityOrganizerManagementScreenP.getInstanceActivityOrganizerManagementScreenP();
				//desktopPane.add(screenManagementActivityOrganizer);
				if(screenManagementActivityOrganizer.getParent() == null){
					desktopPane.add(screenManagementActivityOrganizer);
				}
				screenManagementActivityOrganizer.setVisible(true);
				desktopPane.moveToFront(screenManagementActivityOrganizer);
				try {
					screenManagementActivityOrganizer.setSelected(true);
				} catch (PropertyVetoException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		}
		
	private class ExitMenuAction  implements ActionListener{ 

		@Override
		public void actionPerformed(ActionEvent e) {
			dispose();
		}
	} 

{% for key,value in data.items() %}
	{% for command in value.commands %}
	private class {{command|upperfirst}}{{key}}MenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screen{{command|upperfirst}}{{key}} = {{key}}{{command}}ScreenP.getInstance{{key}}{{command}}ScreenP();
			if(screen{{command|upperfirst}}{{key}}.getParent() == null){
				desktopPane.add(screen{{command}}{{key}});
			}
			screen{{command|upperfirst}}{{key}}.setVisible(true);
			desktopPane.moveToFront(screen{{command|upperfirst}}{{key}});
			try {
				screen{{command|upperfirst}}{{key}}.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	{% endfor %}
	{% if value.statments %}
		{% for actionKey,statment in value.statments.items() %}
			{% if  statment.condition == 'def' %}
	 			{% if  actionKey in ["reportsFrequencyPerEvent","reportsFrequencyPerActivity","reportsListOfAuthors"] %}
		private class {{key}}{{actionKey|upperfirst}}MenuAction implements ActionListener{
			@Override
			public void actionPerformed(ActionEvent e) {
				screen{{key}}{{actionKey|upperfirst}} = {{key}}{{actionKey|upperfirst}}ScreenP.getInstance{{key}}{{actionKey|upperfirst}}ScreenP();
				if(screen{{key}}{{actionKey|upperfirst}}.getParent() == null){
					desktopPane.add(screen{{key}}{{actionKey|upperfirst}});
				}
				screen{{key}}{{actionKey|upperfirst}}.setVisible(true);
				desktopPane.moveToFront(screen{{key}}{{actionKey|upperfirst}});
				try {
					screen{{key}}{{actionKey|upperfirst}}.setSelected(true);
				} catch (PropertyVetoException e1) {
					e1.printStackTrace();
					}
				}  
			}		{% else %}                   
		private class {{actionKey|upperfirst}}MenuAction implements ActionListener{
			@Override
			public void actionPerformed(ActionEvent e) {
				screen{{actionKey|upperfirst}} = {{actionKey|upperfirst}}ScreenP.getInstance{{actionKey|upperfirst}}ScreenP();
				if(screen{{actionKey|upperfirst}}.getParent() == null){
					desktopPane.add(screen{{actionKey|upperfirst}});
				}
				screen{{actionKey|upperfirst}}.setVisible(true);
				desktopPane.moveToFront(screen{{actionKey|upperfirst}});
				try {
					screen{{actionKey|upperfirst}}.setSelected(true);
				} catch (PropertyVetoException e1) {
					e1.printStackTrace();
					}
				}  
			}		{% endif %}
			{% endif %}
		{% endfor %}
	{% endif %}
{% endfor %}
}
