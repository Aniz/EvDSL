// Autogenerated by EvDSL
package {{systemName|lower}}.ev.ui2;
import {{systemName|lower}}.ev.util.LibraryOfDSL;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyVetoException;

import javax.swing.ImageIcon;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.WindowConstants;
import javax.swing.border.EmptyBorder;

import {{systemName|lower}}.ev.facade.{{systemName}}Facade;

public class {{systemName}}MainScreenP extends JFrame {

	private JPanel contentPane;
	
    public static {{systemName}}Facade facade; // caso a variabilidade de tela login seja retirada o sistema deve iniciar dessa tela
	
	private static {{systemName}}MainScreenP instance{{systemName}}MainScreenP;      
	
{% for key,value in data.items() %}
	{% if value.commands %}
		{% for command in value.commands %}
	private {{key}}{{command}}ScreenP screen{{command}}{{key}};	
		{% endfor %}
	{% endif %}
	{% if value.statments %}
		{% for actionKey,statment in value.statments.items() %}
			{% if  statment.condition == 'def' %}
	private {{key|lower}}{{actionKey|upperfirst}}ScreenP screen{{key}}{{actionKey|capitalize}};	
			{% endif %}
		{% endfor %}
	{% endif %}

{% endfor %}
	{% if 'Receipt' in data.actions %}
	private ReceiptScreenP screenReceipt;
	{% endif %}
	{% if 'sendBugTrackEmail' in data.statments %}
	private BugtrackScreenP screenBugtrack;
	{% endif %}
	
	private static JLabel labelImagem;
	
	private JDesktopPane desktopPane;
	
	
	public static {{systemName}}Facade getFacade(){
		return {{systemName}}Facade.getInstance();
	}
	
	public static {{systemName}}MainScreenP getInstance{{systemName}}MainScreenP() {
		if (instance{{systemName}}MainScreenP == null) {
			{{systemName}}MainScreenP.instance{{systemName}}MainScreenP = new {{systemName}}MainScreenP();
		}
		return {{systemName}}MainScreenP.instance{{systemName}}MainScreenP;
	}

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					{{systemName}}MainScreenP frame = new {{systemName}}MainScreenP();
					frame.setVisible(true);
					
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public {{systemName}}MainScreenP() {
		
		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		
		ExitMenuAction exitMenuAction = new ExitMenuAction();
		
{% for key,value in data.items() %}
	{% if value.commands %}
		{% for command in value.commands %}
		{{command}}{{key}}MenuAction {{command|lower}}{{key}}Action = new {{command}}{{key}}MenuAction();	
		{% endfor %}
	{% endif %}
	{% if value.statments %}
		{% for actionKey,statment in value.statments.items() %}
			{% if  statment.condition == 'def' %}
		{{actionKey|capitalize}}MenuAction {{actionKey|lower}}Action = new {{key}}{{actionKey|capitalize}}MenuAction();	
			{% endif %}
		{% endfor %}
	{% endif %}

{% endfor %}

		{% if 'sendBugTrackEmail' in data.statments %}
		BugtrackScreenMenuAction bugtrackAction = new BugtrackScreenMenuAction();
		{% endif %}
		{{systemName}}MainScreenP.facade = {{systemName}}Facade.getInstance();
		
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 1120, 691);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		desktopPane = new JDesktopPane();
		desktopPane.setBackground(Color.LIGHT_GRAY);
		desktopPane.setBounds(6, 36, 1104, 624);
		contentPane.add(desktopPane);
		
		labelImagem = new JLabel("");
		labelImagem.setBounds(210, 164, 648, 193);
		ImageIcon image = new ImageIcon(getClass().getResource("/images/riseLabs.png"));
		Image imag = image.getImage().getScaledInstance(labelImagem.getWidth(), labelImagem.getHeight(), Image.SCALE_SMOOTH);
		labelImagem.setIcon(new ImageIcon(imag));
		desktopPane.add(labelImagem);
		
		JMenuBar menuBar = new JMenuBar();
		menuBar.setBounds(32, 12, 1078, 22);
		contentPane.add(menuBar);
		
		JMenu mnArchieve = new JMenu("Archieve");
		menuBar.add(mnArchieve);
		
		//#if ${Bugs} == "T"		
		JMenuItem mntmBugtrack = new JMenuItem("Bugtrack");
		mnArchieve.add(mntmBugtrack);
		//#endif
		
		JMenuItem mntmExit = new JMenuItem("Exit");
		mnArchieve.add(mntmExit);

{% for key,value in data.items() %}
		JMenu mn{{key}} = new JMenu("{{key}}");
		menuBar.add(mn{{key}});
	{% for command in value.commands %}
		JMenuItem mntm{{command}}{{key}} = new JMenuItem("{{command}}");
		mn{{key}}.add(mntm{{command}}{{key}});
		mntm{{command}}{{key}}.addActionListener({{command|lower}}{{key}}Action);
	{% endfor %}
{% endfor %}
		JMenu mnReports = new JMenu("Reports");
		menuBar.add(mnReports);
		
		mntmExit.addActionListener(exitMenuAction);
	{% if 'sendBugTrackEmail' in data.statments %}
		mntmBugtrack.addActionListener(bugtrackAction);
	{% endif %}
	}
	
	private class ExitMenuAction  implements ActionListener{ 

		@Override
		public void actionPerformed(ActionEvent e) {
			dispose();
		}
	} 

{% for key,value in data.items() %}
	{% for command in value.commands %}
	private class {{command}}{{key}}MenuAction implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			screen{{command}}{{key}} = {{key}}{{command}}ScreenP.getInstance{{key}}{{command}}ScreenP();
			if(screen{{command}}{{key}}.getParent() == null){
				desktopPane.add(screen{{command}}{{key}});
			}
			screen{{command}}{{key}}.setVisible(true);
			desktopPane.moveToFront(screen{{command}}{{key}});
			try {
				screen{{command}}{{key}}.setSelected(true);
			} catch (PropertyVetoException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}  
	}
	{% endfor %}
{% endfor %}

				{% if 'sendBugTrackEmail' in data.statments %}
				private class BugtrackScreenMenuAction  implements ActionListener{ 

					@Override
					public void actionPerformed(ActionEvent e) {
						screenBugtrack = BugtrackScreenP.getInstanceBugtrackScreenP();
						//desktopPane.add(screenBugtrack);
						if(screenBugtrack.getParent() == null){
							desktopPane.add(screenBugtrack);
						}
						screenBugtrack.setVisible(true);
						desktopPane.moveToFront(screenBugtrack);
						try {
							screenBugtrack.setSelected(true);
						} catch (PropertyVetoException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}  
				}
				{% endif %}
}
