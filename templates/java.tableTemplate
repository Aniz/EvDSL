// Autogenerated by EvDSL
package {{systemName|lower}}.ev.table;
import {{systemName|lower}}.ev.util.LibraryOfDSL;

import java.util.List;

import javax.swing.table.AbstractTableModel;

import {{systemName|lower}}.ev.data.{{data.option.entity}};

public class {{data.option.entity}}TableModel extends AbstractTableModel{
	// Nome das Colunas
	
			{% for property in data.option.properties %}
			private static final int COL_{{property.name|upper}} = {{loop.index}};
			{% endfor %}
			
			// Lista de Valores
			private List<{{data.option.entity}}> rows;
			
			public {{data.option.entity}}TableModel(List<{{data.option.entity}}> values){
				this.rows = values;
			}
			v
			public int getRowCount() {
				return rows.size();
			}
			
			//Quantidade de Colunas
			public int getColumnCount() {
				return {{data.option.properties|length}};
			}
			
			//Preenchimento de cada coluna
				public Object getValueAt(int rowIndex, int columnIndex) {
					{{data.option.entity}} {{data.option.entity|lower}} = rows.get(rowIndex);
					if (columnIndex == COL_{{data.option.entity|upper}}ID) {
						return {{data.option.entity|lower}}.getId{{data.option.name}}();
					}
					{% for property in data.option.properties %}
					else if (columnIndex == COL_{{property.name|upper}}) {
						return {{data.option.entity|lower}}.get{{property.name|capitalize}}();
					}  
					{% endfor %}
					return null;
				}
				
				@Override
				public String getColumnName(int column) {
					String coluna = "";
					switch (column) {
					{% for property in data.option.entity.properties %}
  						case COL_{{property.name|upper}}
						coluna = "{{property.label}}";		
  					{% endfor %}
					
					default:
						throw new IllegalArgumentException(EXC_INVALID_COL);
					}
					return coluna;
				}
				
				//Tipo de valor da colna
				@Override
				public Class<?> getColumnClass(int columnIndex) {
					{% for property in data.option.entity.properties %}
					if (columnIndex == {{property.name|upper}}) {
						return {{property.type.name}}.class;
					} 
					{% endfor %}
					return null;
				}
				
				//Abaixo metodos de InserÁ„o, remoÁ„o, update e etc;
				public {{data.option.entity}} get(int row) {
					return rows.get(row);
				}

				public void add{{data.option.entity}}({{data.option.entity}} {{data.option.entity.name|lower}}) {
					rows.add({{data.option.entity.name|lower}});
					int ultimoIndice = getRowCount() - 1;
					fireTableRowsInserted(ultimoIndice, ultimoIndice);
				}
				
				public void remove{{data.option.entity}}(int indiceLinha) {
					rows.remove(indiceLinha);
					fireTableRowsDeleted(indiceLinha, indiceLinha);
				}
				
				public void alterar{{data.option.entity}}(int indiceLinha, {{data.option.entity}} {{data.option.entity|lower}}) {
					{% for property in data.option.properties %}
					rows.get(indiceLinha).set{{property.name|capitalize}}({{data.option.entity|lower}}.get{{property.name}}());		
					{% endfor %}
					fireTableDataChanged();
				}
				
				//real name listade....
				public void add{{data.option.entity}}List(List<{{data.option.entity}}> {{data.option.entity|lower}}List) {
					int indice = getRowCount();
					rows.addAll({{data.option.entity}}s);
					fireTableRowsInserted(indice, indice + {{data.option.entity}}s.size());
				}
				
				public int retornarIndice({{data.option.entity}} {{data.option.entity|lower}}) {
					return rows.indexOf({{data.option.entity}});
				}
				
				// Remove todos os registros.
				public void limpar() {
					rows.clear();

					// Notifica a mudança.
					fireTableDataChanged();
				}
}