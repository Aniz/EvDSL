package {{systemName|lower}}.ev.ui2;
import {{systemName|lower}}.ev.util.LibraryOfDSL;

import java.awt.EventQueue;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;

import {{systemName|lower}}.ev.data.{{data.option.entity}};
import {{systemName|lower}}.ev.business.{{data.option.entity}}Control;
import {{systemName|lower}}.ev.exception.{{data.option.entity}}AlreadyInsertedException;
import {{systemName|lower}}.ev.exception.{{data.option.entity}}NotFoundException;
import {{systemName|lower}}.ev.repository.{{data.option.entity}}Repository;
import {{systemName|lower}}.ev.repository.{{data.option.entity}}RepositoryBDR;
import {{systemName|lower}}.ev.exception.RepositoryException;
import {{systemName|lower}}.ev.table.{{data.option.entity}}TableModel;

public class {{data.option.entity}}ManagementScreenP extends JInternalFrame{

	private static {{data.option.entity}}ManagementScreenP instance{{data.option.entity}}ManagementScreenP;
	private JTextField textFieldDate;
	private JTextField textFieldDescription;
	private JPanel contentPane;
	private JTable table;
	private JScrollPane scrollPane;
	
	private JButton btnBack;
	
	JComboBox<String> {{data.option.entity|lower}}IdcomboBox;
	JComboBox<String> statusComboBox;
	
	JButton btnInsert;
	JButton btnRemove;
	JButton btnUpdate;
	JButton btnSelect;
	JButton btnClean;
	
	JLabel lblLast{{data.option.entity}}Id;
	private JTextField textField{{data.option.entity}}Id;
	

	 public static {{data.option.entity}}ManagementScreenP getInstance{{data.option.entity}}ManagementScreenP() {
		 if (instance{{data.option.entity}}ManagementScreenP == null) {
			 {{data.option.entity}}ManagementScreenP.instance{{data.option.entity}}ManagementScreenP = new {{data.option.entity}}ManagementScreenP();
		 }
		 return {{data.option.entity}}ManagementScreenP.instance{{data.option.entity}}ManagementScreenP;
	 }
	 
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					{{data.option.entity}}ManagementScreenP frame = new {{data.option.entity}}ManagementScreenP();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public {{data.option.entity}}ManagementScreenP() {
		
		InsertButtonAction insertAction = new InsertButtonAction(); 
		RemoveButtonAction removeAction = new RemoveButtonAction(); 
		UpdateButtonAction updateAction = new UpdateButtonAction();
		SelectButtonAction selectAction = new SelectButtonAction(); 
		CleanButtonAction cleanAction = new CleanButtonAction();
		BackButtonAction backAction = new BackButtonAction();
		
		setTitle("{{data.option.entity}} Management");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 841, 513);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBounds(220, 18, 392, 68);
		contentPane.add(panel);
		panel.setLayout(null);
		
		JLabel lblImage = new JLabel("");
		lblImage.setBounds(6, 6, 380, 56);
		ImageIcon image = new ImageIcon(getClass().getResource("/images/riseLabs.png"));
		Image imag = image.getImage().getScaledInstance(lblImage.getWidth(), lblImage.getHeight(), Image.SCALE_SMOOTH);
		lblImage.setIcon(new ImageIcon(imag));
		panel.add(lblImage);
		
		JPanel panel_1 = new JPanel();
		panel_1.setBounds(6, 99, 789, 189);
		contentPane.add(panel_1);
		panel_1.setLayout(null);
		
		JLabel lbl{{data.option.entity}}Id = new JLabel("{{data.option.entity}} Id:");
		lbl{{data.option.entity}}Id.setBounds(6, 6, 69, 16);
		panel_1.add(lbl{{data.option.entity}}Id);
		
		lblLast{{data.option.entity}}Id = new JLabel("");
		lblLast{{data.option.entity}}Id.setBounds(79, 6, 61, 16);
		panel_1.add(lblLast{{data.option.entity}}Id);
		
		JLabel lbl{{data.option.entity}}Id = new JLabel("{{data.option.entity}} Id:");
		lbl{{data.option.entity}}Id.setBounds(6, 49, 104, 16);
		panel_1.add(lbl{{data.option.entity}}Id);
		
		{{data.option.entity|lower}}IdcomboBox = new JComboBox<String>();
		{{data.option.entity|lower}}IdcomboBox.setBounds(102, 45, 84, 27);
		panel_1.add({{data.option.entity|lower}}IdcomboBox);
		
		JLabel lblStatus = new JLabel("Status:");
		lblStatus.setBounds(205, 49, 61, 16);
		panel_1.add(lblStatus);
		
		JLabel lblDate = new JLabel("Date:");
		lblDate.setBounds(420, 49, 61, 16);
		panel_1.add(lblDate);
		
		textFieldDate = new JTextField();
		textFieldDate.setBounds(465, 43, 134, 28);
		panel_1.add(textFieldDate);
		textFieldDate.setColumns(10);
		
		statusComboBox = new JComboBox<String>();
		statusComboBox.setBounds(262, 45, 134, 27);
		panel_1.add(statusComboBox);
		
		JLabel lblDescription = new JLabel("Description:");
		lblDescription.setBounds(6, 126, 104, 16);
		panel_1.add(lblDescription);
		
		textFieldDescription = new JTextField();
		textFieldDescription.setBounds(95, 120, 504, 28);
		panel_1.add(textFieldDescription);
		textFieldDescription.setColumns(10);
		
		textField{{data.option.entity}}Id = new JTextField();
		textField{{data.option.entity}}Id.setBounds(74, 0, 134, 28);
		panel_1.add(textField{{data.option.entity}}Id);
		textField{{data.option.entity}}Id.setColumns(10);
		
		JPanel panel_2 = new JPanel();
		panel_2.setBounds(6, 327, 829, 158);
		contentPane.add(panel_2);
		panel_2.setLayout(null);
		
		scrollPane = new JScrollPane();
		scrollPane.setBounds(6, 6, 800, 121);
		panel_2.add(scrollPane);
		
		table = new JTable();
		scrollPane.setViewportView(table);
		
		btnInsert = new JButton("Insert");
		btnInsert.setBounds(26, 296, 117, 29);
		contentPane.add(btnInsert);
		
		btnRemove = new JButton("Remove");
		btnRemove.setBounds(166, 296, 117, 29);
		contentPane.add(btnRemove);
		
		btnUpdate = new JButton("Update");
		btnUpdate.setBounds(305, 296, 117, 29);
		contentPane.add(btnUpdate);
		
		btnSelect = new JButton("Selection");
		btnSelect.setBounds(441, 296, 117, 29);
		contentPane.add(btnSelect);
		
		btnClean = new JButton("Clean");
		btnClean.setBounds(570, 296, 117, 29);
		contentPane.add(btnClean);
		
		btnInsert.addActionListener(insertAction);
		btnRemove.addActionListener(removeAction);
		btnUpdate.addActionListener(updateAction);
		btnSelect.addActionListener(selectAction);
		btnClean.addActionListener(cleanAction);
		
		btnBack = new JButton("Back");
		btnBack.setBounds(694, 296, 117, 29);
		getContentPane().add(btnBack);
		
		btnBack.addActionListener(backAction);

	{% if data.option.categories|length > 0 %}		
		carregarComboBoxStatus();
	{% endif %}

		carregarComboBoxId{{data.option.entity}}();
		populateTable();
	}
	
	{% if data.option.categories|length > 0 %}
	private void carregarComboBoxStatus(){
		Type{{data.option.entity}}[] status = Type{{data.option.entity}}.values();
		List<String> status{{data.option.entity|lower}}s = new ArrayList<String>();
		for(int i=0; i<status.length; i++){
			status{{data.option.entity|lower}}s.add(i, status[i].name());
			statusComboBox.addItem(status[i].name());
		}
	}
	{% endif %}
	
	private void carregarComboBoxId{{data.option.entity}}(){
		List<{{data.option.entity}}> {{data.option.entity|lower}} = new ArrayList<{{data.option.entity}}>();
		try {
			{{data.option.entity}} = {{systemName}}MainScreenP.facade.get{{data.option.entity}}List();
		} catch (RepositoryException ex) {
			JOptionPane.showMessageDialog(getContentPane(),
					ex.toString(), "Erro",
					JOptionPane.INFORMATION_MESSAGE);
			ex.printStackTrace();
		}
		
		for({{data.option.entity}} entity : {{data.option.entity|lower}}){
			{{data.option.entity|lower}}IdcomboBox.addItem(String.valueOf(entity.getId{{data.option.entity}}()));
		}
		
	}
	
	
	private void populateTable(){
		try {
			{{data.option.entity}}TableModel model;
			model = new {{data.option.entity}}TableModel({{systemName}}MainScreenP.facade.get{{data.option.entity}}s());
			table.setModel(model);
		} catch (RepositoryException e) {
			JOptionPane.showMessageDialog(getContentPane(),
					e.toString(), "Erro",
					JOptionPane.INFORMATION_MESSAGE);
			e.printStackTrace();
		}
	}
	
	private void cleanFields() {
		textFieldDate.setText("");
		textFieldDescription.setText("");
		btnInsert.setEnabled(true);
	}
	
	
	//INSERINDO UMA REVIEW
	private class InsertButtonAction  implements ActionListener{ 

		@Override
		public void actionPerformed(ActionEvent e) {

			
			{{data.option.entity}} {{data.option.entity|lower}} = null;
			
			Integer {{data.option.entity|lower}}Id = Integer.parseInt({{data.option.entity|lower}}IdcomboBox.getSelectedItem().toString());
			Status{{data.option.entity}} status = Status{{data.option.entity}}.valueOf(statusComboBox.getSelectedItem().toString());
			String date = textFieldDate.getText();
			String description  = textFieldDescription.getText();
			
			//int resultado = 0;
			if ({{data.option.entity|lower}}Id.equals("") || status.equals("") || date.equals("")
					|| description.equals("") ) {
				JOptionPane.showMessageDialog(getContentPane(),
						"NÃ£o pode haver campo vazio.", "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				return;
			} else {					
				try {
					
					{{data.option.entity|lower}} = new {{data.option.entity}}();
					{{data.option.entity|lower}}.setId{{data.option.entity}}({{data.option.entity|lower}}Id);
					{{data.option.entity|lower}}.setDate(date);
					{{data.option.entity|lower}}.setDescription(description);
					{{data.option.entity|lower}}.setStatus(status);
					
					//Atualizar JTable
					{{data.option.entity}}TableModel model = new {{data.option.entity}}TableModel(RiseEventsMainScreenP.facade.get{{data.option.entity}}s());
					
					RiseEventsMainScreenP.facade.insert{{data.option.entity}}({{data.option.entity|lower}}); //isso obriga que o programa seja executado a partir da tela main screen, caso ele seja iniciado da tela de login ficaria RISEEVENTLOGINSCREEN.facade....
				

							//({{data.option.entity}}TableModel) table.getModel();
					model.add{{data.option.entity}}({{data.option.entity|lower}});
					table.setModel(model);

					// Limpar campos
					cleanFields();

				} catch ({{data.option.entity}}AlreadyInsertedException e1) {
					JOptionPane
					.showMessageDialog(
							getContentPane(),
							"JÃ¡ existe uma revisao cadastrada com esse Registro!",
							"Revisao Existente",
							JOptionPane.ERROR_MESSAGE);
					e1.printStackTrace();
				} catch (RepositoryException e1) {
					JOptionPane.showMessageDialog(getContentPane(),
							e1.toString(), "Erro",
							JOptionPane.INFORMATION_MESSAGE);
					e1.printStackTrace();
				}
				
				
			}

			
		}
	}
	
	private class RemoveButtonAction  implements ActionListener{ 

		@Override
		public void actionPerformed(ActionEvent e) {
			int rowIndex = table.getSelectedRow();
			
			if(rowIndex == -1){
				JOptionPane.showMessageDialog(getContentPane(),
						"Selecione a Revisao a ser removida!");
				return;
			}
			
			try {
				{{data.option.entity}} {{data.option.entity|lower}} = new {{data.option.entity}}TableModel(RiseEventsMainScreenP.facade.get{{data.option.entity}}s()).get(rowIndex);
				RiseEventsMainScreenP.facade.remove{{data.option.entity}}({{data.option.entity|lower}}.getId{{data.option.entity}}());
				{{data.option.entity}}TableModel model = ({{data.option.entity}}TableModel) table.getModel();
				model.remove{{data.option.entity}}(rowIndex);
				table.setModel(model);
				
				cleanFields();

			} catch ({{data.option.entity}}NotFoundException e1) {
				JOptionPane.showMessageDialog(getContentPane(),
						e1.toString(), "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				e1.printStackTrace();
			} catch (RepositoryException e1) {
				JOptionPane.showMessageDialog(getContentPane(),
						e1.toString(), "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				e1.printStackTrace();
			} catch ({{data.option.entity}}AlreadyInsertedException e1) {
				JOptionPane.showMessageDialog(getContentPane(),
						e1.toString(), "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				e1.printStackTrace();
			}
			
		}
	}
	
	private class UpdateButtonAction  implements ActionListener{ 

		@Override
		public void actionPerformed(ActionEvent e) {
			
		int rowIndex = table.getSelectedRow();
			
			
			try {

				
				Integer {{data.option.entity|lower}}Id = Integer.parseInt({{data.option.entity|lower}}IdcomboBox.getSelectedItem().toString());
				Status{{data.option.entity}} status = Status{{data.option.entity}}.valueOf(statusComboBox.getSelectedItem().toString());
				String date = textFieldDate.getText();
				String description  = textFieldDescription.getText();
				
				if ({{data.option.entity|lower}}Id.equals("") || status.equals("") || date.equals("")
						|| description.equals("") ) {
					JOptionPane.showMessageDialog(getContentPane(),
							"NÃ£o pode haver campo vazio.", "Erro",
							JOptionPane.INFORMATION_MESSAGE);
					return;

				} else {
					
					{{data.option.entity}} {{data.option.entity|lower}}New = new {{data.option.entity}}();
					{{data.option.entity|lower}}New.setId{{data.option.entity}}({{data.option.entity|lower}}Id);
					{{data.option.entity|lower}}New.setDate(date);
					{{data.option.entity|lower}}New.setDescription(description);
					{{data.option.entity|lower}}New.setStatus(status);
					
					try {
						{{systemName}}MainScreenP.facade.update{{data.option.entity}}({{data.option.entity|lower}}New);
						{{data.option.entity}}TableModel model;
						model = new {{data.option.entity}}TableModel({{systemName}}MainScreenP.facade.get{{data.option.entity}}s());
						table.setModel(model);
					} catch ({{data.option.entity}}NotFoundException e1) {
						JOptionPane
						.showMessageDialog(
								getContentPane(),
								"Revisao que estÃ¡ tentando alterar nÃ£o existe!",
								"Revisao Inexistente",
								JOptionPane.ERROR_MESSAGE);
						e1.printStackTrace();
					} catch ({{data.option.entity}}AlreadyInsertedException e1) {
						JOptionPane.showMessageDialog(getContentPane(),
								e1.toString(), "Erro",
								JOptionPane.INFORMATION_MESSAGE);
						e1.printStackTrace();
					}
					
				}
				
			} catch (RepositoryException e1) {
				JOptionPane.showMessageDialog(getContentPane(),
						e1.toString(), "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				e1.printStackTrace();
			}
			
			
		}
	}
	
	private class SelectButtonAction  implements ActionListener{ 

		@Override
		public void actionPerformed(ActionEvent e) {
			
			int rowIndex = table.getSelectedRow();
			{{data.option.entity}} {{data.option.entity|lower}}Old = null;

			try {
				{{data.option.entity|lower}}Old=  new {{data.option.entity}}TableModel(RiseEventsMainScreenP.facade.get{{data.option.entity}}s()).get(rowIndex);
			
				lblLast{{data.option.entity}}Id.setText(String.valueOf({{data.option.entity|lower}}Old.getId{{data.option.entity}}()));
				{{data.option.entity|lower}}IdcomboBox.setSelectedItem({{data.option.entity|lower}}Old.getId{{data.option.entity}}());
				statusComboBox.setSelectedItem({{data.option.entity|lower}}Old.getStatus());
				textFieldDate.setText({{data.option.entity|lower}}Old.getDate());
				textFieldDescription.setText({{data.option.entity|lower}}Old.getDescription());
				
			} catch (RepositoryException ex) {
				JOptionPane.showMessageDialog(getContentPane(),
						ex.toString(), "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				ex.printStackTrace();
			}
			
		}
	}
	
	private class CleanButtonAction  implements ActionListener{ 

		@Override
		public void actionPerformed(ActionEvent e) {
			
		cleanFields();
			
		}
	}
	
	private class BackButtonAction  implements ActionListener{ 

		@Override
		public void actionPerformed(ActionEvent e) {
			dispose();
			{{data.option.entity}}ManagementScreenP.instance{{data.option.entity}}ManagementScreenP = null;
		}
	}
	
}
//#endif