package {{systemName|lower}}.ev.ui2;

import java.awt.EventQueue;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;

import {{systemName|lower}}.ev.data.{{data.option.entity}};
import {{systemName|lower}}.ev.data.{{data.option.entity}}.Type{{data.option.entity}};
import {{systemName|lower}}.ev.data.Registration;
import {{systemName|lower}}.ev.data.User;
import {{systemName|lower}}.ev.exception.{{data.option.entity}}AlreadyInsertedException;
import {{systemName|lower}}.ev.exception.{{data.option.entity}}NotFoundException;
import {{systemName|lower}}.ev.exception.RepositoryException;
import {{systemName|lower}}.ev.table.{{data.option.entity}}TableModel;

public class {{data.option.entity}}ManagementScreenP extends JInternalFrame{

	private static {{data.option.entity}}ManagementScreenP instance{{data.option.entity}}ManagementScreenP;
	private JPanel contentPane;
	private JTable table;
	private JScrollPane scrollPane;
	
	JComboBox<String> typeComboBox;
	
	JButton btnInsert;
	JButton btnRemove;
	JButton btnUpdate;
	JButton btnSelect;
	JButton btnClean;
	JButton btnBack;
	
	JLabel lblLast{{data.option.entity}}Id;
	
	{% for property in data.option.properties %}
	private JTextField text{{property.name|capitalize}};
	{% endfor %}
	{% if data.option.categories|length > 0 %}
	private JComboBox comboBoxType{{data.option.entity}};
	{% endif %}
	
	 public static {{data.option.entity}}ManagementScreenP getInstance{{data.option.entity}}ManagementScreenP() {
		 if (instance{{data.option.entity}}ManagementScreenP == null) {
			 {{data.option.entity}}ManagementScreenP.instance{{data.option.entity}}ManagementScreenP = new {{data.option.entity}}ManagementScreenP();
		 }
		 return {{data.option.entity}}ManagementScreenP.instance{{data.option.entity}}ManagementScreenP;
	 }
	 
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					{{data.option.entity}}ManagementScreenP frame = new {{data.option.entity}}ManagementScreenP();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public {{data.option.entity}}ManagementScreenP() {
		
		setTitle("{{data.option.entity}} Management");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 841, 513);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JPanel panel = new JPanel();
		panel.setBounds(220, 18, 392, 68);
		contentPane.add(panel);
		panel.setLayout(null);
		
		JLabel lblImage = new JLabel("");
		lblImage.setBounds(6, 6, 380, 56);
		ImageIcon image = new ImageIcon(getClass().getResource("/images/riseLabs.png"));
		Image imag = image.getImage().getScaledInstance(lblImage.getWidth(), lblImage.getHeight(), Image.SCALE_SMOOTH);
		lblImage.setIcon(new ImageIcon(imag));
		panel.add(lblImage);
		
		JPanel panel_1 = new JPanel();
		panel_1.setBounds(6, 99, 829, 189);
		contentPane.add(panel_1);
		panel_1.setLayout(null);
	
		JLabel lbl{{data.option.entity}}Id = new JLabel("{{data.option.entity}} ID:");
		lbl{{data.option.entity}}Id.setBounds(6, 20, 120, 16);
		panel_1.add(lbl{{data.option.entity}}Id);
		
		lblLast{{data.option.entity}}Id = new JLabel("");
		lblLast{{data.option.entity}}Id.setBounds(128, 20, 61, 16);
		panel_1.add(lblLast{{data.option.entity}}Id);
		
		typeComboBox = new JComboBox<String>();
		typeComboBox.setBounds(248, 83, 134, 27);
		panel_1.add(typeComboBox);
		
		JLabel lblType = new JLabel("Type:");
		lblType.setBounds(205, 87, 61, 16);
		panel_1.add(lblType);
		
		JPanel panel_2 = new JPanel();
		panel_2.setBounds(6, 327, 829, 158);
		contentPane.add(panel_2);
		panel_2.setLayout(null);
		
		scrollPane = new JScrollPane();
		scrollPane.setBounds(6, 6, 817, 146);
		panel_2.add(scrollPane);
		
		table = new JTable();
		scrollPane.setViewportView(table);
		
		InsertButtonAction insertAction = new InsertButtonAction(); 
		JButton btnInsert = new JButton("Insert");
		btnInsert.setBounds(6, 296, 117, 29);
		contentPane.add(btnInsert);
		btnInsert.addActionListener(insertAction);
	
		RemoveButtonAction removeAction = new RemoveButtonAction(); 
		JButton btnRemove = new JButton("Remove");
		btnRemove.setBounds(127, 296, 117, 29);
		contentPane.add(btnRemove);
		btnRemove.addActionListener(removeAction);
	
		UpdateButtonAction updateAction = new UpdateButtonAction();
		JButton btnUpdate = new JButton("Update");
		btnUpdate.setBounds(248, 296, 117, 29);
		contentPane.add(btnUpdate);
		btnUpdate.addActionListener(updateAction);
	
		SelectButtonAction selectAction = new SelectButtonAction(); 
		JButton btnSelect = new JButton("Select");
		btnSelect.setBounds(377, 296, 117, 29);
		contentPane.add(btnSelect);
		btnSelect.addActionListener(selectAction);

		CleanButtonAction cleanAction = new CleanButtonAction();
		JButton btnClean = new JButton("Clean");
		btnClean.setBounds(503, 296, 117, 29);
		contentPane.add(btnClean);
		btnClean.addActionListener(cleanAction);

		BackButtonAction backAction = new BackButtonAction();
		JButton btnBack = new JButton("Back");
		btnBack.setBounds(621, 296, 117, 29);
		contentPane.add(btnBack);
		btnBack.addActionListener(backAction);
		
		//Retirada Login
		loadLastIndex();
		{% if data.option.categories|length > 0 %}
			carregarComboBoxType{{data.option.entity}}();
		{% endif %}
		populateTable();
	}
	
	private void loadLastIndex(){
		try {
			lblLast{{data.option.entity}}Id.setText(String.valueOf({{systemName}}MainScreenP.facade.get{{data.option.entity}}LastId()));
		} catch (RepositoryException e) {
			JOptionPane.showMessageDialog(getContentPane(),
					e.toString(), "Erro",
					JOptionPane.INFORMATION_MESSAGE);
			e.printStackTrace();
		}
	}
	
	private void carregarComboBoxType{{data.option.entity}}(){
		Type{{data.option.entity}}[] types = Type{{data.option.entity}}.values();
		List<String> typescheckingcopys = new ArrayList<String>();
		for(int i=0; i<types.length; i++){
			typescheckingcopys.add(i, types[i].name());
			typeComboBox.addItem(types[i].name());
		}
		
	}
	
	private void populateTable(){
		try {
			{{data.option.entity}}TableModel model;
			model = new {{data.option.entity}}TableModel({{systemName}}MainScreenP.facade.get{{data.option.entity}}List());
			table.setModel(model);
		} catch (RepositoryException e) {
			JOptionPane.showMessageDialog(getContentPane(),
					e.toString(), "Erro",
					JOptionPane.INFORMATION_MESSAGE);
			e.printStackTrace();
		}
	}
	
	private void cleanFields() {
	
		{% for property in data.option.properties %}
		textField{{property.name}}.setText("");
		{% endfor %}
		btnInsert.setEnabled(true);
	}
	
	//INSERINDO UM CHECKING COPY 
		private class InsertButtonAction  implements ActionListener{ 

			@Override
			public void actionPerformed(ActionEvent e) {
				{{data.option.entity}} {{data.option.entity}} = null;
				
				{% for property in data.option.properties %}
				{{property.type|capitalize}} {{property.name}} = textField{{property.name|capitalize}}.getText();	
				{% endfor %}
				{% if data.option.categories|length > 0 %}
				Type{{data.option.entity}} type{{data.option.entity|lower}} = Type{{data.option.entity}}.valueOf(comboBoxType{{data.option.entity}}.getSelectedItem().toString());
				{% endif %}
				
					try {
						
						{{data.option.entity}} = new {{data.option.entity}}();
						{% for property in data.option.properties %}
						{{data.option.entity}}.set{{property.name|capitalize}}({{property.name}});	
						{% endfor %}
						{% if data.option.categories|length > 0 %}
							{{data.option.entity}}.setType{{data.option.entity}}(Type{{data.option.entity}}.valueOf(type{{data.option.entity|lower}}.toString()));
						{% endif %}
							
						//Atualizar JTable
						{{data.option.entity}}TableModel model = new {{data.option.entity}}TableModel({{systemName}}MainScreenP.facade.get{{data.option.entity}}List());
						
						{{systemName}}MainScreenP.facade.insert{{data.option.entity}}({{data.option.entity}}); //isso obriga que o programa seja executado a partir da tela main screen, caso ele seja iniciado da tela de login ficaria RISEEVENTLOGINSCREEN.facade....
					
						model.add{{data.option.entity}}({{data.option.entity}});
						table.setModel(model);

						// Limpar campos
						cleanFields();

					} catch ({{data.option.entity}}AlreadyInsertedException e1) {
						JOptionPane
						.showMessageDialog(
								getContentPane(),
								"JÃ¡ existe um Registro!",
								"Registro Existente",
								JOptionPane.ERROR_MESSAGE);
						e1.printStackTrace();
					} catch (RepositoryException e1) {
						JOptionPane.showMessageDialog(getContentPane(),
								e1.toString(), "Erro",
								JOptionPane.INFORMATION_MESSAGE);
						e1.printStackTrace();
					}
			}
		}
		
		private class RemoveButtonAction  implements ActionListener{ 

			@Override
			public void actionPerformed(ActionEvent e) {
				int rowIndex = table.getSelectedRow();
				
				if(rowIndex == -1){
					JOptionPane.showMessageDialog(getContentPane(),
							"Selecione o Registro a ser removido!");
					return;
				}
				
				try {
					{{data.option.entity}} {{data.option.entity}} = new {{data.option.entity}}TableModel({{systemName}}MainScreenP.facade.get{{data.option.entity}}List()).get(rowIndex);
					{{systemName}}MainScreenP.facade.remove{{data.option.entity}}({{data.option.entity}}.getId{{data.option.entity}}());
					{{data.option.entity}}TableModel model = ({{data.option.entity}}TableModel) table.getModel();
					model.remove{{data.option.entity}}(rowIndex);
					table.setModel(model);
					cleanFields();

				} catch ({{data.option.entity}}NotFoundException e1) {
					JOptionPane.showMessageDialog(getContentPane(),
							e1.toString(), "Erro",
							JOptionPane.INFORMATION_MESSAGE);
					e1.printStackTrace();
				} catch (RepositoryException e1) {
					JOptionPane.showMessageDialog(getContentPane(),
							e1.toString(), "Erro",
							JOptionPane.INFORMATION_MESSAGE);
					e1.printStackTrace();
				} catch ({{data.option.entity}}AlreadyInsertedException e1) {
					JOptionPane.showMessageDialog(getContentPane(),
							e1.toString(), "Erro",
							JOptionPane.INFORMATION_MESSAGE);
					e1.printStackTrace();
				}
			}
		}
		
		private class UpdateButtonAction  implements ActionListener{ 
			@Override
			public void actionPerformed(ActionEvent e) {
			int rowIndex = table.getSelectedRow();
				
				try {
					{% for property in data.option.properties %}
					{{property.type|capitalize}} {{property.name}} = {% if property.type == 'int' %}Integer.parseInt({% endif %}textField{{property.name}}.getText(){% if property.type == 'integer' %}).parseInt({% endif %};
					{% endfor %}

					{% if data.option.categories|length > 0 %}
					String type{{data.option.entity}} = comboBoxType{{data.option.entity}}.getSelectedItem().toString();
					{% endif %}
					if (type{{data.option.entity}}.equals("") ) {
						JOptionPane.showMessageDialog(getContentPane(),
								"NÃ£o pode haver campo vazio.", "Erro",
								JOptionPane.INFORMATION_MESSAGE);
						return;
					} else {
						
						{{data.option.entity}} {{data.option.entity}}New = new {{data.option.entity}}();
						{% for property in data.option.properties %}
						{{data.option.entity}}New.set{{property.name|capitalize}}({{property.name}});
						{% endfor %}
						{% if data.option.categories|length > 0 %}
							{{data.option.entity}}New.setType{{data.option.entity}}(Type{{data.option.entity}}.valueOf(type{{data.option.entity}}));
						{% endif %}
						
						try {
							{{systemName}}MainScreenP.facade.update{{data.option.entity}}({{data.option.entity}}New);
							{{data.option.entity}}TableModel model;
							model = new {{data.option.entity}}TableModel({{systemName}}MainScreenP.facade.get{{data.option.entity}}List());
							table.setModel(model);
						} catch ({{data.option.entity}}NotFoundException e1) {
							JOptionPane
							.showMessageDialog(
									getContentPane(),
									"Registro Inexistente!",
									"Registro Inexistente",
									JOptionPane.ERROR_MESSAGE);
							e1.printStackTrace();
						} catch ({{data.option.entity}}AlreadyInsertedException e1) {
							JOptionPane.showMessageDialog(getContentPane(),
									e1.toString(), "Erro",
									JOptionPane.INFORMATION_MESSAGE);
							e1.printStackTrace();
						}
					}
				} catch (RepositoryException e1) {
					JOptionPane.showMessageDialog(getContentPane(),
							e1.toString(), "Erro",
							JOptionPane.INFORMATION_MESSAGE);
					e1.printStackTrace();
				}
			}
		}

	private class SelectButtonAction  implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			int rowIndex = table.getSelectedRow();
			{{data.option.entity}} {{data.option.entity}}Old = null;
			try {
				{{data.option.entity}}Old=  new {{data.option.entity}}TableModel({{systemName}}MainScreenP.facade.get{{data.option.entity}}List()).get(rowIndex);
				lblLast{{data.option.entity}}Id.setText(String.valueOf({{data.option.entity}}Old.getId{{data.option.entity}}()));
				typeComboBox.setSelectedItem({{data.option.entity}}Old.getType{{data.option.entity}}());
				
			} catch (RepositoryException ex) {
				JOptionPane.showMessageDialog(getContentPane(),
						ex.toString(), "Erro",
						JOptionPane.INFORMATION_MESSAGE);
				ex.printStackTrace();
			}
		}
	}
	
	private class CleanButtonAction  implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			cleanFields();
			loadLastIndex();		
		}
	}
	
	private class BackButtonAction  implements ActionListener{ 
		@Override
		public void actionPerformed(ActionEvent e) {
			
			dispose();
			{{data.option.entity}}ManagementScreenP.instance{{data.option.entity}}ManagementScreenP = null;
		}
	}
}
//#endif